----------------------------- Criar o Banco -----------------------------

CREATE DATABASE DNACRM
TEMPLATE = TEMPLATE0
ENCODING 'UTF-8'
CONNECTION LIMIT 40;

/*

Instrções

 Apos criarem o banco com o comando acima, 
 vão sair e entrar do pgAdmin, ir no banco SISCON e executar os 
 comandos abaixo ou conectar na sessao do banco SISCON e excutar os comandos.

*/

----------------------------- Tabelas do Banco -----------------------------


CREATE TABLE TB_APARTAMENTO(
  CD_APARTAMENTO SERIAL,
  CD_SETOR INTEGER CONSTRAINT NN_TB_APARTAMENTO_CD_SETOR NOT NULL,
  DESC_APARTAMENTO VARCHAR(10) CONSTRAINT NN_TB_APARTAMENTO_DESC_APARTAMENTO NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_APARTAMENTO_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_APARTAMENTO_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_APARTAMENTO_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_APARTAMENTO_DT_USUARIO_ATUALIZA NOT NULL,   
  CONSTRAINT PK_TB_APARTAMENTO_CD_APARTAMENTO PRIMARY KEY(CD_APARTAMENTO)
);

CREATE TABLE TB_CATEGORIA(
  CD_CATEGORIA SERIAL,
  DESC_CATEGORIA VARCHAR(50) CONSTRAINT NN_TB_CATEGORIA_DESC_CATEGORIA NOT NULL,
  CD_USUARIO_CRIACAO INTEGER,
  DT_USUARIO_CRIACAO TIMESTAMP,   
  CD_USUARIO_ATUALIZA INTEGER,
  DT_USUARIO_ATUALIZA TIMESTAMP,  
  CONSTRAINT PK_TB_CATEGORIA_CD_CATEGORIA PRIMARY KEY(CD_CATEGORIA)
);

CREATE TABLE TB_CATEGORIA_VALOR(
  CD_VL_CATEGORIA SERIAL,
  CD_CATEGORIA INTEGER CONSTRAINT NN_TB_CATEGORIA_VALOR_CD_CATEGORIA NOT NULL,
  DESC_VL_CATG VARCHAR(25) CONSTRAINT NN_TB_CATEGORIA_VALOR_DESC_VL_CATG NOT NULL,
  CD_USUARIO_CRIACAO INTEGER,
  DT_USUARIO_CRIACAO TIMESTAMP,   
  CD_USUARIO_ATUALIZA INTEGER,
  DT_USUARIO_ATUALIZA TIMESTAMP,  
  CONSTRAINT PK_TB_CD_VL_CATEGORIA_CD_VL_CATEGORIA PRIMARY KEY(CD_VL_CATEGORIA, CD_CATEGORIA)
);

CREATE TABLE TB_CONDOMINIO(
  CD_CONDOMINIO SERIAL,
  NM_CONDOMINIO VARCHAR(50) CONSTRAINT NN_TB_CONDOMINIO_NM_CONDOMINIO NOT NULL,
  IM_PERFIL OID,
  CEP VARCHAR(9),
  RUA VARCHAR(50) CONSTRAINT NN_TB_CONDOMINIO_RUA NOT NULL,
  NUMERO INTEGER CONSTRAINT NN_TB_CONDOMINIO_NUMERO NOT NULL,
  BAIRRO VARCHAR(50) CONSTRAINT NN_TB_CONDOMINIO_BAIRRO NOT NULL,
  CIDADE VARCHAR(25) CONSTRAINT NN_TB_CONDOMINIO_CIDADE NOT NULL,
  CD_CATG_ESTADO INTEGER CONSTRAINT NN_TB_CONDOMINIO_CD_CATG_ESTADOO NOT NULL,
  CD_CATG_VL_ESTADO INTEGER CONSTRAINT NN_TB_CONDOMINIO_CD_CATG_VL_ESTADO NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_CONDOMINIO_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_CONDOMINIO_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_CONDOMINIO_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_CONDOMINIO_DT_USUARIO_ATUALIZA NOT NULL, 
  CONSTRAINT PK_TB_CONDOMINIO_CD_CONDOMINIO PRIMARY KEY(CD_CONDOMINIO)
);

/*
CAMPO IE_APROVADO

P - EM PROCESSO DE APROVACAO
A - APRAVADO
R - REPROVADO
*/

CREATE TABLE TB_ITENS_ORCAMENTO(
  NR_SEQUENCIA SERIAL,
  CD_ORCAMENTO INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_CD_ORCAMENTO NOT NULL,
  CD_PESSOA_JURIDICA INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_CD_PESSOA_JURIDICA NOT NULL,
  DESC_ITEM VARCHAR(50) CONSTRAINT NN_TB_ITENS_ORCAMENTO_DESC_ITEM NOT NULL,
  QT_ITEM INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_QT_ITEM NOT NULL,
  VALOR_UNIT NUMERIC(10,2) CONSTRAINT NN_TB_ITENS_ORCAMENTO_VALOR_UNIT NOT NULL,
  VALOR_TOTAL NUMERIC(10,2) CONSTRAINT NN_TB_ITENS_ORCAMENTO_VALOR_TOTAL NOT NULL,
  IE_APROVADO CHAR(1) CONSTRAINT NN_TB_ITENS_ORCAMENTO_IE_APROVADO NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_ITENS_ORCAMENTO_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_ITENS_ORCAMENTO_DT_USUARIO_ATUALIZA NOT NULL, 
  CONSTRAINT PK_TB_ITENS_ORCAMENTO_NR_SEQUENCIA PRIMARY KEY(NR_SEQUENCIA)
);

CREATE TABLE TB_MORADOR_ENDERECO(
  NR_SEQUENCIA SERIAL,
  CD_PESSOA_FISICA INTEGER CONSTRAINT NN_TB_MORADOR_ENDERECO_CD_PESSOA_FISICA NOT NULL,
  CD_APARTAMENTO INTEGER CONSTRAINT NN_TB_MORADOR_ENDERECO_CD_APARTAMENTO NOT NULL,
  DT_ENTRADA TIMESTAMP CONSTRAINT NN_TB_MORADOR_ENDERECO_DT_ENTRADA NOT NULL,
  DT_SAIDA TIMESTAMP,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_MORADOR_ENDERECO_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_MORADOR_ENDERECO_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_MORADOR_ENDERECO_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_MORADOR_ENDERECO_DT_USUARIO_ATUALIZA NOT NULL, 
  CONSTRAINT PK_TB_MORADOR_ENDERECO_NR_SEQUENCIA PRIMARY KEY(NR_SEQUENCIA)
);

CREATE TABLE TB_OCORRENCIA_PF_ENVOLVIDA(
  CD_OCORRENCIA SERIAL,
  CD_PESSOA_FISICA INTEGER CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_CD_PESSOA_FISICA NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_DT_USUARIO_ATUALIZA NOT NULL, 
  CONSTRAINT PK_TB_CD_OCORRENCIA_CD_PESSOA_FISICA PRIMARY KEY(CD_OCORRENCIA, CD_PESSOA_FISICA)
);

/*
1 - A Iniciar
2 - Execução
3 - Análise
4 - Aguardando Terceiros   
5 - Finalizado
*/

CREATE TABLE TB_OCORRENCIA(
  CD_OCORRENCIA SERIAL,
  CD_PF_INFORMANTE INTEGER CONSTRAINT NN_TB_OCORRENCIA_CD_PF_INFORMANTE NOT NULL,
  DESC_ASSUNTO VARCHAR(50) CONSTRAINT NN_TB_OCORRENCIA_DESC_ASSUNTO NOT NULL,
  DESC_OCORRENCIA TEXT CONSTRAINT NN_TB_OCORRENCIA_DESC_OCORRENCIA NOT NULL,
  DT_OCORRENCIA TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_DT_OCORRENCIA NOT NULL,
  IE_SITUACAO CHAR(1) CONSTRAINT NN_TB_OCORRENCIA_IE_SITUACAO NOT NULL,
  DT_FIM TIMESTAMP,
  DESC_CONCLUSAO TEXT,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_OCORRENCIA_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_OCORRENCIA_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_DT_USUARIO_ATUALIZA NOT NULL, 
  CONSTRAINT PK_TB_OCORRENCIA_CD_OCORRENICA PRIMARY KEY(CD_OCORRENCIA)
);

CREATE TABLE TB_ORCAMENTO(
  CD_ORCAMENTO SERIAL,
  CD_ORDEM_SERVICO INTEGER,
  DT_ORCAMENTO TIMESTAMP CONSTRAINT NN_TB_ORCAMENTO_DT_ORCAMENTO NOT NULL,
  DT_FIM TIMESTAMP,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_ORCAMENTO_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_ORCAMENTO_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_ORCAMENTO_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_ORCAMENTO_DT_USUARIO_ATUALIZA NOT NULL,
  CONSTRAINT PK_TB_ORCAMENTO_CD_ORCAMENTO PRIMARY KEY(CD_ORCAMENTO)
);

/*
1 - A Iniciar
2 - Execução
3 - Análise
4 - Aguardando Terceiros   
5 - Finalizado
*/

CREATE TABLE TB_ORDEM_SERVICO(
  CD_ORDEM_SERVICO SERIAL,
  CD_OCORRENCIA INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_CD_OCORRENCIA NOT NULL,
  CD_PF_EXECUTOR INTEGER,
  CD_PF_SOLICITANTE INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_CD_PF_SOLICITANTE NOT NULL,
  DESC_ASSUNTO VARCHAR(50) CONSTRAINT NN_TB_ORDEM_SERVICO_DESC_ASSUNTO NOT NULL,
  DESC_ORDEM_SERVICO TEXT CONSTRAINT NN_TB_ORDEM_SERVICO_DESC_ORDEM_SERVICO NOT NULL,
  DT_INICIO TIMESTAMP CONSTRAINT NN_TB_ORDEM_SERVICO_DT_INICIO NOT NULL,
  DT_FIM TIMESTAMP,
  CD_CATG_ESTAGIO INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_CD_CATG_ESTAGIO NOT NULL,
  CD_VL_CATG_ESTAGIO INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_CD_VL_CATG_ESTAGIO NOT NULL,
  DESC_CONCLUSAO TEXT,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_ORDEM_SERVICO_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_ORDEM_SERVICO_DT_USUARIO_ATUALIZA NOT NULL,
  CONSTRAINT PK_TB_ORDEM_SERVICO_CD_ORDEM_SERVICO PRIMARY KEY(CD_ORDEM_SERVICO)
);

CREATE TABLE TB_PESSOA_FISICA(
  CD_PESSOA_FISICA SERIAL,
  CD_PESSOA_JURIDICA INTEGER,
  CD_PROFISSAO INTEGER,
  NM_PESSOA_FISICA VARCHAR(50) CONSTRAINT NN_TB_PESSOA_FISICA_NM_PESSOA_FISICA NOT NULL,
  CPF VARCHAR(14) CONSTRAINT NN_TB_PESSOA_FISICA_CPF NOT NULL,
  RG VARCHAR(15) CONSTRAINT NN_TB_PESSOA_FISICA_RG NOT NULL,
  CD_CATG_ORG_RG INTEGER CONSTRAINT NN_TB_PESSOA_FISICA_CD_CATG_ORG_RG NOT NULL,
  CD_VL_CATG_ORG_RG INTEGER CONSTRAINT NN_TB_PESSOA_FISICA_CD_VL_CATG_ORG_RG NOT NULL,
  EMAIL VARCHAR(60),  
  DT_NASCIMENTO DATE CONSTRAINT NN_TB_PESSOA_FISICA_DT_NASCIMENTO NOT NULL,
  IE_SEXO CHAR(1) CONSTRAINT NN_TB_PESSOA_FISICA_IE_SEXO NOT NULL,
  IM_PERFIL OID,
  IE_ESTUDA CHAR(1),
  CD_INSTITUICAO INTEGER,
  DT_INICIO_CURSO DATE,
  DT_FIM_CURSO DATE,
  CD_CATG_GRAU_ENSINO INTEGER,
  CD_VL_CATG_GRAU_ENSINO INTEGER,
  CD_USUARIO_CRIACAO INTEGER,
  DT_USUARIO_CRIACAO TIMESTAMP,   
  CD_USUARIO_ATUALIZA INTEGER,
  DT_USUARIO_ATUALIZA TIMESTAMP,  
  CONSTRAINT PK_TB_PESSAO_FISICA_CD_PESSOA_FISICA PRIMARY KEY(CD_PESSOA_FISICA),
  CONSTRAINT UQ_TB_PESSOA_FISICA_CPF UNIQUE(CPF),
  CONSTRAINT UQ_TB_PESSOA_FISICA_RG UNIQUE(RG),
  CONSTRAINT UQ_TB_PESSOA_FISICA_EMAIL UNIQUE(EMAIL)
);

CREATE TABLE TB_PESSOA_JURIDICA(
  CD_PESSOA_JURIDICA SERIAL,
  CNPJ VARCHAR(18) CONSTRAINT NN_TB_PESSAO_JURIDICA_CGC NOT NULL,
  NM_FANTASIA VARCHAR(50) CONSTRAINT NN_TB_PESSOA_JURIDICA_NM_FANTASIA NOT NULL,
  DESC_RAZAO VARCHAR(50) CONSTRAINT NN_TB_PESSOA_JURIDICA_DESC_RAZAO NOT NULL,
  DESC_ATIVIDADE TEXT,
  IM_PERFIL OID,  
  EMAIL VARCHAR(30), 
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PESSOA_JURIDICA_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PESSOA_JURIDICA_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PESSOA_JURIDICA_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PESSOA_JURIDICA_DT_USUARIO_ATUALIZA NOT NULL,
  CONSTRAINT PK_TB_PESSAO_JURIDICA_CD_PESSOA_JURIDICA PRIMARY KEY(CD_PESSOA_JURIDICA),
  CONSTRAINT UQ_TB_PESSOA_JURIDICA_CGC UNIQUE(CNPJ),
  CONSTRAINT UQ_TB_PESSOA_JURIDICA_EMAIL UNIQUE(EMAIL)
);

CREATE TABLE TB_PF_ENDERECO(
  NR_SEQUENCIA SERIAL,
  CD_CATG_END INTEGER CONSTRAINT NN_TB_PF_ENDERECO_CD_CATG_END NOT NULL,
  CD_VL_CATG_END INTEGER CONSTRAINT NN_TB_PF_ENDERECO_CD_VL_CATG_END NOT NULL,
  CD_PESSOA_FISICA INTEGER CONSTRAINT NN_TB_PF_ENDERECO_CD_PESSOA_FISICA NOT NULL,
  CEP VARCHAR(9) CONSTRAINT NN_TB_PF_ENDERECO_CEP NOT NULL,
  RUA VARCHAR(50) CONSTRAINT NN_TB_PF_ENDERECO_RUA NOT NULL,
  NUMERO INTEGER CONSTRAINT NN_TB_PF_ENDERECO_NUMERO NOT NULL,
  BAIRRO VARCHAR(25) CONSTRAINT NN_TB_ENDERECO_BAIRRO NOT NULL,
  CIDADE VARCHAR(25) CONSTRAINT NN_TB_ENDERECO_CIDADE NOT NULL, 
  CD_CATG_ESTADO INTEGER CONSTRAINT NN_TB_PF_ENDERECO_CD_CATG_ESTADO NOT NULL,
  CD_VL_CATG_ESTADO INTEGER CONSTRAINT NN_TB_PF_ENDERECO_CD_VL_CATG_ESTADO NOT NULL,
  OBSERVACAO TEXT,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PF_ENDERECO_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PF_ENDERECO_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PF_ENDERECO_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PF_ENDERECO_DT_USUARIO_ATUALIZA NOT NULL,
  CONSTRAINT PK_TB_PF_ENDERECO_NR_SEQUENCIA PRIMARY KEY(NR_SEQUENCIA)
);

CREATE TABLE TB_PJ_ENDERECO(
  NR_SEQUENCIA SERIAL,
  CD_CATG_END INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_CD_CATG_END NOT NULL,
  CD_VL_CATG_END INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_CD_VL_CATG_END NOT NULL,
  CD_PESSOA_JURIDICA INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_CD_PESSOA_JURIDICA NOT NULL,
  CEP VARCHAR(9) CONSTRAINT NN_TB_PJ_ENDERECO_CEP NOT NULL,
  RUA VARCHAR(50) CONSTRAINT NN_TB_PJ_ENDERECO_RUA NOT NULL,
  NUMERO INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_NUMERO NOT NULL,
  BAIRRO VARCHAR(25) CONSTRAINT NN_TB_PJ_ENDERECO_BAIRRO NOT NULL,
  CIDADE VARCHAR(25) CONSTRAINT NN_TB_PJ_ENDERECO_CIDADE NOT NULL,
  CD_CATG_ESTADO INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_CD_CATG_ESTADO NOT NULL,
  CD_VL_CATG_ESTADO INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_CD_VL_CATG_ESTADO NOT NULL,
  OBSERVACAO TEXT,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PJ_ENDERECO_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PJ_ENDERECO_DT_USUARIO_ATUALIZA NOT NULL,
  CONSTRAINT PK_TB_PJ_ENDERECO_NR_SEQUENCIA PRIMARY KEY(NR_SEQUENCIA)
);

CREATE TABLE TB_PROFISSAO(
  CD_PROFISSAO SERIAL,
  NM_PROFISSAO VARCHAR(50) CONSTRAINT NN_TB_PROFISSAO_NM_PROFISSAO NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PROFISSAO_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PROFISSAO_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PROFISSAO_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PROFISSAO_DT_USUARIO_ATUALIZA NOT NULL,
  CONSTRAINT PK_TB_PROFISSAO_CD_PROFISSAO PRIMARY KEY(CD_PROFISSAO)
);

CREATE TABLE TB_RELACIONADOS(
  CD_PESSOA_FISICA_1 INTEGER CONSTRAINT NN_TB_RELACIONADOS_CD_PESSOA_FISICA_1  NOT NULL,
  CD_PESSOA_FISICA_2 INTEGER CONSTRAINT NN_TB_RELACIONADOS_CD_PESSOA_FISICA_2 NOT NULL,
  CD_CATG_RELAC_PF_1 INTEGER CONSTRAINT NN_TB_RELACIONADOS_CD_CATG_RELAC_1 NOT NULL,
  CD_VL_CATG_RELAC_PF_1 INTEGER CONSTRAINT NN_TB_RELACIONADOS_CD_VL_CATG_RELAC_1 NOT NULL,
  CD_CATG_RELAC_PF_2 INTEGER CONSTRAINT NN_TB_RELACIONADOS_CD_CATG_RELAC_1 NOT NULL,
  CD_VL_CATG_RELAC_PF_2 INTEGER CONSTRAINT NN_TB_RELACIONADOS_CD_VL_CATG_RELAC_1 NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_RELACIONADOS_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_RELACIONADOS_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_RELACIONADOS_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_RELACIONADOS_DT_USUARIO_ATUALIZA NOT NULL,
  CONSTRAINT PK_TB_RELACIONADOS_CD_PESSOA_FISICA_1_CD_PESSOA_FISICA_2  PRIMARY KEY(CD_PESSOA_FISICA_1, CD_PESSOA_FISICA_2)
);

CREATE TABLE TB_SERVICO_ADICIONAL(
  CD_SERV_ADICIONAL SERIAL,
  CD_ORDEM_SERVICO INTEGER,
  CD_PESSOA_FISICA INTEGER,
  CD_CATG_SERVICO INTEGER CONSTRAINT NN_TB_SERVICO_ADICIONAL_CD_CATG_SERVICO NOT NULL,
  CD_CATG_VL_SERVICO INTEGER CONSTRAINT NN_TB_SERVICO_ADICIONAL_CD_CATG_VL_SERVICO NOT NULL,
  CD_SETOR INTEGER,
  CD_VAGA INTEGER,
  DT_INICIO TIMESTAMP CONSTRAINT NN_TB_SERVICO_ADICIIONAL_DT_INICIO NOT NULL,
  DT_FIM TIMESTAMP,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_SERVICO_ADICIONAL_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_SERVICO_ADICIONAL_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_SERVICO_ADICIONAL_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_SERVICO_ADICIONAL_DT_USUARIO_ATUALIZA NOT NULL,
  CONSTRAINT PK_TB_SERVICO_ADICIONAL_CD_SERV_ADICIONAL PRIMARY KEY(CD_SERV_ADICIONAL)
);

CREATE TABLE TB_SETOR(
  CD_SETOR SERIAL,
  CD_CONDOMINIO INTEGER CONSTRAINT NN_TB_SETOR_CD_CONDOMINIO NOT NULL,
  NM_SETOR VARCHAR(50) CONSTRAINT NN_TB_SETOR_NM_SETOR NOT NULL,
  OBSERVACAO TEXT,
  IM_PERFIL OID,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_SETOR_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_SETOR_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_SETOR_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_SETOR_DT_USUARIO_ATUALIZA NOT NULL,
  CONSTRAINT PK_TB_SETOR_CD_SETOR PRIMARY KEY(CD_SETOR)
);

/*
Nivel de acesso
1 - Administrador
2 - Atendente
3 - Usuario
*/	

CREATE TABLE TB_USUARIO(
  CD_USUARIO INTEGER CONSTRAINT NN_TB_USUARIO_CD_PF_USU NOT NULL,  
  CD_USU_BANCO VARCHAR(40) CONSTRAINT NN_TB_USUARIO_CD_USU_BANCO NOT NULL,
  LOGIN VARCHAR(60) CONSTRAINT NN_TB_USUARIO_LOGIN NOT NULL,
  NIVEL INTEGER CONSTRAINT NN_TB_USUARIO_NIVEL NOT NULL,
  IE_STATUS CHAR(1) CONSTRAINT NN_TB_USUARIO_IE_STATUS NOT NULL,
  CD_USUARIO_CRIACAO INTEGER,
  DT_USUARIO_CRIACAO TIMESTAMP,   
  CD_USUARIO_ATUALIZA INTEGER,
  DT_USUARIO_ATUALIZA TIMESTAMP,
  CONSTRAINT PK_TB_USUARIO_CD_USUARIO PRIMARY KEY(CD_USUARIO)
);

CREATE TABLE TB_VAGA_GARAGEM(
 CD_VAGA SERIAL,
 DS_VAGA VARCHAR(25) CONSTRAINT NN_TB_VAGA_GARAGEM_DS_VAGA NOT NULL, 
 CD_SETOR INTEGER CONSTRAINT NN_TB_VAGA_GARAGEM_CD_SETOR NOT NULL,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_VAGA_GARAGEM_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_VAGA_GARAGEM_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_VAGA_GARAGEM_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_VAGA_GARAGEM_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_VAGA_GARAGEM_CD_VAGA PRIMARY KEY(CD_VAGA)
);

CREATE TABLE TB_PF_TELEFONE(
 CD_PF_FONE SERIAL,
 CD_PESSOA_FISICA INTEGER CONSTRAINT NN_TB_PF_TELEFONE_CD_PESSOA_FISICA NOT NULL,
 FONE VARCHAR(14) CONSTRAINT NN_TB_PF_TELEFONE_FONE NOT NULL,
 OBSERVACAO TEXT,
 CD_CATG_FONE_PF INTEGER CONSTRAINT NN_TB_PF_TELEFONE_CD_CATG_FONE_PF NOT NULL,
 CD_CATG_VL_FONE_PF INTEGER CONSTRAINT NN_TB_PF_TELEFONE_CD_CATG_VL_FONE_PF NOT NULL,
 CD_CATG_OPERADORA INTEGER CONSTRAINT NN_TB_PF_TELEFONE_CD_CATG_OPERADORA NOT NULL,
 CD_CATG_VL_OPERADORA INTEGER CONSTRAINT NN_TB_PF_TELEFONE_CD_CATG_VL_OPERADORA NOT NULL,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PF_TELEFONE_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PF_TELEFONE_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PF_TELEFONE_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PF_TELEFONE_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_PF_TELEFONE_CD_PF_FONE PRIMARY KEY(CD_PF_FONE)
);

CREATE TABLE TB_PJ_TELEFONE(
 CD_PJ_FONE SERIAL,
 CD_PESSOA_JURIDICA INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_CD_PESSOA_JURIDICA NOT NULL,
 FONE VARCHAR(14) CONSTRAINT NN_TB_PJ_TELEFONE_FONE NOT NULL,
 OBSERVACAO TEXT,
 CD_CATG_FONE_PJ INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_CD_CATG_FONE_PJ NOT NULL,
 CD_CATG_VL_FONE_PJ INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_CD_CATG_VL_FONE_PJ NOT NULL,
 CD_CATG_OPERADORA INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_CD_CATG_OPERADORA NOT NULL,
 CD_CATG_VL_OPERADORA INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_CD_CATG_VL_OPERADORA NOT NULL,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PJ_TELEFONE_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_CD_USUARIO_ATUALIZA NOT NULL, 
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PJ_TELEFONE_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_PJ_TELEFONE_CD_PJ_FONE PRIMARY KEY(CD_PJ_FONE) 
);

CREATE TABLE TB_INSTITUICAO_ENSINO(
 CD_INSTITUICAO SERIAL,
 DS_INSTITUICAO VARCHAR(50) CONSTRAINT NN_TB_INSTITUICAO_ENSINO_DS_INSTITUICAO NOT NULL,
 CD_CATG_INSTITUICAO INTEGER CONSTRAINT NN_TB_INSTITUICAO_ENSINO_CD_CATG_INSTITUICAO NOT NULL,
 CD_CATG_VL_INSTITUICAO INTEGER CONSTRAINT NN_TB_INSTITUICAO_ENSINO_CD_CATG_VL_INSTITUICAO NOT NULL,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_INSTITUICAO_ENSINO_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_INSTITUICAO_ENSINO_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_INSTITUICAO_ENSINO_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_INSTITUICAO_ENSINO_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_INSTITUICAO_ENSINO_CD_INSTITUICAO PRIMARY KEY(CD_INSTITUICAO)
);


ALTER TABLE TB_INSTITUICAO_ENSINO ADD CONSTRAINT FK_TB_INSTITUICAO_ENSINO_CD_CATG_INSTITUICAO
FOREIGN KEY(CD_CATG_INSTITUICAO,CD_CATG_VL_INSTITUICAO) REFERENCES TB_CATEGORIA_VALOR(CD_CATEGORIA,CD_VL_CATEGORIA);

ALTER TABLE TB_PF_TELEFONE ADD CONSTRAINT FK_TB_PF_TELEFONE_CD_CATG_FONE_PF_CD_CATG_VL_FONE_PF 
FOREIGN KEY(CD_CATG_FONE_PF,CD_CATG_VL_FONE_PF)  REFERENCES TB_CATEGORIA_VALOR(CD_CATEGORIA,CD_VL_CATEGORIA);

ALTER TABLE TB_PJ_TELEFONE ADD CONSTRAINT FK_TB_PJ_TELEFONE_CD_CATG_FONE_PJ_CD_CATG_VL_FONE_PJ 
FOREIGN KEY(CD_CATG_FONE_PJ,CD_CATG_VL_FONE_PJ)  REFERENCES TB_CATEGORIA_VALOR(CD_CATEGORIA,CD_VL_CATEGORIA);

ALTER TABLE TB_SERVICO_ADICIONAL ADD CONSTRAINT FK_TB_SERVICO_ADICIONAL_CD_PESSOA_FISICA 
FOREIGN KEY(CD_PESSOA_FISICA) REFERENCES TB_PESSOA_FISICA(CD_PESSOA_FISICA);

ALTER TABLE TB_SERVICO_ADICIONAL ADD CONSTRAINT FK_TB_SERVICO_ADICIONAL_CD_CATG_SERVICO_CD_CATG_VL_SERVICO 
FOREIGN KEY(CD_CATG_SERVICO,CD_CATG_VL_SERVICO) REFERENCES TB_CATEGORIA_VALOR(CD_CATEGORIA,CD_VL_CATEGORIA);

ALTER TABLE TB_PESSOA_FISICA ADD CONSTRAINT FK_TB_PESSOA_FISICA 
FOREIGN KEY(CD_INSTITUICAO) REFERENCES TB_INSTITUICAO_ENSINO(CD_INSTITUICAO);

ALTER TABLE TB_PJ_TELEFONE ADD CONSTRAINT FK_TB_PJ_TELEFONE 
FOREIGN KEY(CD_PESSOA_JURIDICA) REFERENCES TB_PESSOA_JURIDICA(CD_PESSOA_JURIDICA);

ALTER TABLE TB_PF_TELEFONE ADD CONSTRAINT FK_TB_PF_TELEFONE 
FOREIGN KEY(CD_PESSOA_FISICA) REFERENCES TB_PESSOA_FISICA(CD_PESSOA_FISICA);

ALTER TABLE TB_VAGA_GARAGEM ADD CONSTRAINT FK_TB_VAGA_GARAGEM_CD_SETOR 
FOREIGN KEY(CD_SETOR) REFERENCES TB_SETOR(CD_SETOR);

ALTER TABLE TB_USUARIO ADD CONSTRAINT FK_TB_USUARIO_CD_PESSOA_FISICA 
FOREIGN KEY(CD_USUARIO) REFERENCES TB_PESSOA_FISICA(CD_PESSOA_FISICA);

ALTER TABLE TB_SETOR ADD CONSTRAINT FK_TB_SETOR_CD_CONDOMINIO 
FOREIGN KEY(CD_CONDOMINIO) REFERENCES TB_CONDOMINIO(CD_CONDOMINIO);

ALTER TABLE TB_SERVICO_ADICIONAL ADD CONSTRAINT FK_TB_SERVICO_ADICIONAL_CD_ORDEM_SERVICO 
FOREIGN KEY(CD_ORDEM_SERVICO) REFERENCES TB_ORDEM_SERVICO(CD_ORDEM_SERVICO);

ALTER TABLE TB_RELACIONADOS ADD CONSTRAINT FK_TB_RELACIONADOS_CD_PESSOA_FISICA_1 
FOREIGN KEY(CD_PESSOA_FISICA_1) REFERENCES TB_PESSOA_FISICA(CD_PESSOA_FISICA);

ALTER TABLE TB_RELACIONADOS ADD CONSTRAINT FK_TB_RELACIONADOS_CD_PESSOA_FISICA_2 
FOREIGN KEY(CD_PESSOA_FISICA_2) REFERENCES TB_PESSOA_FISICA(CD_PESSOA_FISICA);

ALTER TABLE TB_PJ_ENDERECO ADD CONSTRAINT FK_TB_PJ_ENDERECO_CD_PESSOA_JURIDICA 
FOREIGN KEY(CD_PESSOA_JURIDICA) REFERENCES TB_PESSOA_JURIDICA(CD_PESSOA_JURIDICA);

ALTER TABLE TB_PJ_ENDERECO ADD CONSTRAINT FK_TB_PJ_ENDERECO_CD_CATG_END 
FOREIGN KEY(CD_CATG_END) REFERENCES TB_CATEGORIA(CD_CATEGORIA);

ALTER TABLE TB_PJ_ENDERECO ADD CONSTRAINT FK_TB_PJ_ENDERECO_CD_CATG_END_CD_VL_CATG_END 
FOREIGN KEY(CD_CATG_END,CD_VL_CATG_END) REFERENCES TB_CATEGORIA_VALOR(CD_CATEGORIA,CD_VL_CATEGORIA);

ALTER TABLE TB_PF_ENDERECO ADD CONSTRAINT FK_TB_PF_ENDERECO_CD_PESSOA_FISICA 
FOREIGN KEY(CD_PESSOA_FISICA) REFERENCES TB_PESSOA_FISICA(CD_PESSOA_FISICA);

ALTER TABLE TB_PF_ENDERECO ADD CONSTRAINT FK_TB_PF_ENDERECO_CD_CATG_END_CD_VL_CATG_END 
FOREIGN KEY(CD_CATG_END,CD_VL_CATG_END) REFERENCES TB_CATEGORIA_VALOR(CD_CATEGORIA,CD_VL_CATEGORIA);

ALTER TABLE TB_PESSOA_FISICA ADD CONSTRAINT FK_TB_PESSOA_FISICA_CD_PESSOA_JURIDICA 
FOREIGN KEY(CD_PESSOA_JURIDICA) REFERENCES TB_PESSOA_JURIDICA(CD_PESSOA_JURIDICA);

ALTER TABLE TB_PESSOA_FISICA ADD CONSTRAINT FK_TB_PESSOA_FISICA_CD_PROFISSAO 
FOREIGN KEY(CD_PROFISSAO) REFERENCES TB_PROFISSAO(CD_PROFISSAO);

ALTER TABLE TB_ORDEM_SERVICO ADD CONSTRAINT FK_TB_ORDEM_SERVICO_CD_OCORRENCIA 
FOREIGN KEY(CD_OCORRENCIA) REFERENCES TB_OCORRENCIA(CD_OCORRENCIA);

ALTER TABLE TB_ORDEM_SERVICO ADD CONSTRAINT FK_TB_ORDEM_SERVICO_CD_PF_EXECUTOR 
FOREIGN KEY(CD_PF_EXECUTOR) REFERENCES TB_PESSOA_FISICA(CD_PESSOA_FISICA);

ALTER TABLE TB_ORDEM_SERVICO ADD CONSTRAINT FK_TB_PESSOA_FISICA_CD_PF_SOLICITANTE 
FOREIGN KEY(CD_PF_SOLICITANTE) REFERENCES TB_PESSOA_FISICA(CD_PESSOA_FISICA);

ALTER TABLE TB_ORCAMENTO ADD CONSTRAINT FK_TB_ORCAMENTO_CD_ORDEM_SERVICO 
FOREIGN KEY(CD_ORDEM_SERVICO) REFERENCES TB_ORDEM_SERVICO(CD_ORDEM_SERVICO);

ALTER TABLE TB_OCORRENCIA ADD CONSTRAINT FK_TB_OCORRENCIA_CD_PF_INFORMANTE 
FOREIGN KEY(CD_PF_INFORMANTE) REFERENCES TB_PESSOA_FISICA(CD_PESSOA_FISICA);

ALTER TABLE TB_OCORRENCIA_PF_ENVOLVIDA ADD CONSTRAINT FK_TB_OCORRENCIA_PF_ENVOLVIDA_CD_PESSOA_FISICA 
FOREIGN KEY(CD_PESSOA_FISICA) REFERENCES TB_PESSOA_FISICA(CD_PESSOA_FISICA);

ALTER TABLE TB_OCORRENCIA_PF_ENVOLVIDA ADD CONSTRAINT FK_TB_OCORRENCIA_PF_ENVOLVIDA_CD_OCORRENCIA 
FOREIGN KEY(CD_OCORRENCIA) REFERENCES TB_OCORRENCIA(CD_OCORRENCIA);

ALTER TABLE TB_MORADOR_ENDERECO ADD CONSTRAINT FK_TB_MORADOR_ENDERECO_CD_PESSOA_FISICA 
FOREIGN KEY(CD_PESSOA_FISICA) REFERENCES TB_PESSOA_FISICA(CD_PESSOA_FISICA);

ALTER TABLE TB_MORADOR_ENDERECO ADD CONSTRAINT FK_TB_MORADOR_ENDERECO_CD_APARTAMENTO 
FOREIGN KEY(CD_APARTAMENTO) REFERENCES TB_APARTAMENTO(CD_APARTAMENTO);

ALTER TABLE TB_ITENS_ORCAMENTO ADD CONSTRAINT FK_TB_ITENS_ORCAMENTO_CD_PESSOA_JURIDICA 
FOREIGN KEY(CD_PESSOA_JURIDICA) REFERENCES TB_PESSOA_JURIDICA(CD_PESSOA_JURIDICA);

ALTER TABLE TB_ITENS_ORCAMENTO ADD CONSTRAINT FK_TB_ITENS_ORCAMENTO_CD_ORCAMENTO 
FOREIGN KEY(CD_ORCAMENTO) REFERENCES TB_ORCAMENTO(CD_ORCAMENTO);

ALTER TABLE TB_CATEGORIA_VALOR ADD CONSTRAINT FK_TB_CATEGORIA_VALOR_CD_CATEGORIA 
FOREIGN KEY(CD_CATEGORIA) REFERENCES TB_CATEGORIA(CD_CATEGORIA);

ALTER TABLE TB_APARTAMENTO ADD CONSTRAINT FK_TB_APARTAMENTO_CD_SETOR 
FOREIGN KEY(CD_SETOR) REFERENCES TB_SETOR(CD_SETOR);

ALTER TABLE TB_CONDOMINIO ADD CONSTRAINT FK_TB_CONDOMINIO_CD_CATG_ESTADO_CD_CATG_VL_ESTADO  
FOREIGN KEY(CD_CATG_ESTADO,CD_CATG_VL_ESTADO) REFERENCES TB_CATEGORIA_VALOR(CD_CATEGORIA,CD_VL_CATEGORIA);

ALTER TABLE TB_USUARIO ADD CONSTRAINT FK_TB_USUARIO_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_USUARIO ADD CONSTRAINT FK_TB_USUARIO_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_SETOR ADD CONSTRAINT FK_TB_SETOR_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_SETOR ADD CONSTRAINT FK_TB_SETOR_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_SERVICO_ADICIONAL ADD CONSTRAINT FK_TB_SERVICO_ADICIONAL_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_SERVICO_ADICIONAL ADD CONSTRAINT FK_TB_SERVICO_ADICIONAL_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_RELACIONADOS ADD CONSTRAINT FK_TB_RELACIONADOS_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_RELACIONADOS ADD CONSTRAINT FK_TB_RELACIONADOS_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PROFISSAO ADD CONSTRAINT FK_TB_PROFISSAO_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PROFISSAO ADD CONSTRAINT FK_TB_PROFISSAO_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PJ_ENDERECO ADD CONSTRAINT FK_TB_PJ_ENDERECO_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PJ_ENDERECO ADD CONSTRAINT FK_TB_PJ_ENDERECO_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PF_ENDERECO ADD CONSTRAINT FK_TB_PF_ENDERECO_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PF_ENDERECO ADD CONSTRAINT FK_TB_PF_ENDERECO_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PESSOA_JURIDICA ADD CONSTRAINT FK_TB_PESSOA_JURIDICA_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PESSOA_JURIDICA ADD CONSTRAINT FK_TB_PESSOA_JURIDICA_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PESSOA_FISICA ADD CONSTRAINT FK_TB_PESSOA_FISICA_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PESSOA_FISICA ADD CONSTRAINT FK_TB_PESSOA_FISICA_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_ORDEM_SERVICO ADD CONSTRAINT FK_TB_ORDEM_SERVICO_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_ORDEM_SERVICO ADD CONSTRAINT FK_TB_ORDEM_SERVICO_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_ORCAMENTO ADD CONSTRAINT FK_TB_ORCAMENTO_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_ORCAMENTO ADD CONSTRAINT FK_TB_ORCAMENTO_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_OCORRENCIA ADD CONSTRAINT FK_TB_OCORRENCIA_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_OCORRENCIA ADD CONSTRAINT FK_TB_OCORRENCIA_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_OCORRENCIA_PF_ENVOLVIDA ADD CONSTRAINT FK_TB_OCORRENCIA_PF_ENVOLVIDA_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_OCORRENCIA_PF_ENVOLVIDA ADD CONSTRAINT FK_TB_OCORRENCIA_PF_ENVOLVIDA_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_MORADOR_ENDERECO ADD CONSTRAINT FK_TB_MORADOR_ENDERECO_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_MORADOR_ENDERECO ADD CONSTRAINT FK_TB_MORADOR_ENDERECO_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_ITENS_ORCAMENTO ADD CONSTRAINT FK_TB_ITENS_ORCAMENTO_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_ITENS_ORCAMENTO ADD CONSTRAINT FK_TB_ITENS_ORCAMENTO_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_CONDOMINIO ADD CONSTRAINT FK_TB_CONDOMINIO_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_CONDOMINIO ADD CONSTRAINT FK_TB_CONDOMINIO_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_CATEGORIA_VALOR ADD CONSTRAINT FK_TB_CATEGORIA_VALOR_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_CATEGORIA_VALOR ADD CONSTRAINT FK_TB_CATEGORIA_VALOR_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_CATEGORIA ADD CONSTRAINT FK_TB_CATEGORIA_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_CATEGORIA ADD CONSTRAINT FK_TB_CATEGORIA_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_APARTAMENTO ADD CONSTRAINT FK_TB_APARTAMENTO_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_APARTAMENTO ADD CONSTRAINT FK_TB_APARTAMENTO_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_VAGA_GARAGEM ADD CONSTRAINT FK_TB_VAGA_GARAGEM_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_VAGA_GARAGEM ADD CONSTRAINT FK_TB_VAGA_GARAGEM_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PF_TELEFONE ADD CONSTRAINT FK_TB_PF_TELEFONE_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PF_TELEFONE ADD CONSTRAINT FK_TB_PF_TELEFONE_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PJ_TELEFONE ADD CONSTRAINT FK_TB_PJ_TELEFONE_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PJ_TELEFONE ADD CONSTRAINT FK_TB_PJ_TELEFONE_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_INSTITUICAO_ENSINO ADD CONSTRAINT FK_TB_INSTITUICAO_ENSINO_CD_USUARIO_CRIACAO 
FOREIGN KEY(CD_USUARIO_CRIACAO) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_INSTITUICAO_ENSINO ADD CONSTRAINT FK_TB_INSTITUICAO_ENSINO_CD_USUARIO_ATUALIZA 
FOREIGN KEY(CD_USUARIO_ATUALIZA) REFERENCES TB_USUARIO(CD_USUARIO);

----------------------------- Tabelas de Logs -----------------------------

CREATE TABLE TB_APARTAMENTO_LOG(
  NR_SEQ_LOG INTEGER,
  USU_EXECUTOR INTEGER CONSTRAINT NN_TB_APARTAMENTO_LOG_USU_EXECUTOR NOT NULL,
  DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_APARTAMENTO_LOG_DT_EXECUTOR NOT NULL,
  COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_APARTAMENTO_LOG_COMANDO_EXECUTADO NOT NULL,   
  CD_APARTAMENTO INTEGER CONSTRAINT NN_TB_APARTAMENTO_LOG_CD_APARTAMENTO NOT NULL,
  CD_PREDIO INTEGER CONSTRAINT NN_TB_APARTAMENTO_LOG_CD_PREDIO NOT NULL,
  DESC_APARTAMENTO VARCHAR(10) CONSTRAINT NN_TB_APARTAMENTO_LOG_DESC_APARTAMENTO NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_APARTAMENTO_LOG_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_APARTAMENTO_LOG_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_APARTAMENTO_LOG_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_APARTAMENTO_LOG_DT_USUARIO_ATUALIZA NOT NULL,   
  CONSTRAINT PK_TB_APARTAMENTO_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_CATEGORIA_LOG(
  NR_SEQ_LOG INTEGER,
  USU_EXECUTOR INTEGER CONSTRAINT NN_TB_CATEGORIA_LOG_USU_EXECUTOR NOT NULL,
  DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_CATEGORIA_LOG_DT_EXECUTOR NOT NULL,
  COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_CATEGORIA_LOG_COMANDO_EXECUTADO NOT NULL,    
  CD_CATEGORIA INTEGER CONSTRAINT NN_TB_CATEGORIA_LOG_CD_CATEGORIA NOT NULL,
  DESC_CATEGORIA VARCHAR(50) CONSTRAINT NN_TB_CATEGORIA_LOG_DESC_CATEGORIA NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_CATEGORIA_LOG_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_CATEGORIA_LOG_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_CATEGORIA_LOG_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_CATEGORIA_LOG_DT_USUARIO_ATUALIZA NOT NULL,  
  CONSTRAINT PK_TB_CATEGORIA_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_CATEGORIA_VALOR_LOG(
  NR_SEQ_LOG INTEGER,
  USU_EXECUTOR INTEGER CONSTRAINT NN_TB_CATEGORIA_VALOR_LOG_USU_EXECUTOR NOT NULL,
  DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_CATEGORIA_VALOR_LOG_DT_EXECUTOR NOT NULL,
  COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_CATEGORIA_VALOR_LOG_COMANDO_EXECUTADO NOT NULL,   	
  CD_VL_CATEGORIA INTEGER CONSTRAINT NN_TB_CATEGORIA_VALOR_LOG_NR_SEQ_LOG NOT NULL,
  CD_CATEGORIA INTEGER CONSTRAINT NN_TB_CATEGORIA_VALOR_LOG_CD_CATEGORIA NOT NULL,
  DESC_VL_CATG VARCHAR(25) CONSTRAINT NN_TB_CATEGORIA_VALOR_LOG_DESC_VL_CATG NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_CATEGORIA_VALOR_LOG_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_CATEGORIA_VALOR_LOG_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_CATEGORIA_VALOR_LOG_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_CATEGORIA_VALOR_LOG_DT_USUARIO_ATUALIZA NOT NULL,  
  CONSTRAINT PK_TB_CATEGORIA_VALOR_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_CONDOMINIO_LOG(
  NR_SEQ_LOG INTEGER,
  USU_EXECUTOR INTEGER CONSTRAINT NN_TB_CONDOMINIO_LOG_USU_EXECUTOR NOT NULL,
  DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_CONDOMINIO_LOG_DT_EXECUTOR NOT NULL,
  COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_CONDOMINIO_LOG_COMANDO_EXECUTADO NOT NULL,  
  CD_CONDOMINIO INTEGER CONSTRAINT NN_TB_CONDOMINIO_LOG_CD_CONDOMINIO NOT NULL,
  NM_CONDOMINIO VARCHAR(50) CONSTRAINT NN_TB_CONDOMINIO_LOG_NM_CONDOMINIO NOT NULL,
  IM_PERFIL OID,
  CEP VARCHAR(9),
  RUA VARCHAR(50) CONSTRAINT NN_TB_CONDOMINIO_LOG_RUA NOT NULL,
  NUMERO INTEGER CONSTRAINT NN_TB_CONDOMINIO_LOG_NUMERO NOT NULL,
  BAIRRO VARCHAR(50) CONSTRAINT NN_TB_CONDOMINIO_LOG_BAIRRO NOT NULL,
  CIDADE VARCHAR(25) CONSTRAINT NN_TB_CONDOMINIO_LOG_CIDADE NOT NULL,
  CD_CATG_ESTADO INTEGER CONSTRAINT NN_TB_CONDOMINIO_LOG_CD_CATG_ESTADOO NOT NULL,
  CD_CATG_VL_ESTADO INTEGER CONSTRAINT NN_TB_CONDOMINIO_LOG_CD_CATG_VL_ESTADO NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_CONDOMINIO_LOG_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_CONDOMINIO_LOG_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_CONDOMINIO_LOG_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_CONDOMINIO_LOG_DT_USUARIO_ATUALIZA NOT NULL, 
  CONSTRAINT PK_TB_CONDOMINIO_LOG_NR_SEQ_LOG  PRIMARY KEY(NR_SEQ_LOG)
);

/*
CAMPO IE_APROVADO

P - EM PROCESSO DE APROVACAO
A - APRAVADO
R - REPROVADO
*/

CREATE TABLE TB_ITENS_ORCAMENTO_LOG(
  NR_SEQ_LOG INTEGER,
  USU_EXECUTOR INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_USU_EXECUTOR NOT NULL,
  DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_DT_EXECUTOR NOT NULL,
  COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_COMANDO_EXECUTADO NOT NULL,  
  NR_SEQUENCIA INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_NR_SEQUENCIA NOT NULL,
  CD_ORCAMENTO INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_CD_ORCAMENTO NOT NULL,
  CD_PESSOA_JURIDICA INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_CD_PESSOA_JURIDICA NOT NULL,
  DESC_ITEM VARCHAR(50) CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_DESC_ITEM NOT NULL,
  QT_ITEM INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_QT_ITEM NOT NULL,
  VALOR_UNIT NUMERIC(10,2) CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_VALOR_UNIT NOT NULL,
  VALOR_TOTAL NUMERIC(10,2) CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_VALOR_TOTAL NOT NULL,
  IE_APROVADO CHAR(1) CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_IE_APROVADO NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_ITENS_ORCAMENTO_LOG_DT_USUARIO_ATUALIZA NOT NULL, 
  CONSTRAINT PK_TB_ITENS_ORCAMENTO_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_MORADOR_ENDERECO_LOG(
  NR_SEQ_LOG INTEGER,
  USU_EXECUTOR INTEGER CONSTRAINT NN_TB_MORADOR_ENDERECO_LOG_USU_EXECUTOR NOT NULL,
  DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_MORADOR_ENDERECO_LOG_DT_EXECUTOR NOT NULL,
  COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_MORADOR_ENDERECO_LOG_COMANDO_EXECUTADO NOT NULL,
  NR_SEQUENCIA INTEGER CONSTRAINT NN_TB_MORADOR_ENDERECO_LOG_NR_SEQUENCIA NOT NULL,
  CD_PESSOA_FISICA INTEGER CONSTRAINT NN_TB_MORADOR_ENDERECO_LOG_CD_PESSOA_FISICA NOT NULL,
  CD_APARTAMENTO INTEGER CONSTRAINT NN_TB_MORADOR_ENDERECO_LOG_CD_APARTAMENTO NOT NULL,
  DT_ENTRADA TIMESTAMP CONSTRAINT NN_TB_MORADOR_ENDERECO_LOG_DT_ENTRADA NOT NULL,
  DT_SAIDA TIMESTAMP,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_MORADOR_ENDERECO_LOG_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_MORADOR_ENDERECO_LOG_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_MORADOR_ENDERECO_LOG_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_MORADOR_ENDERECO_LOG_DT_USUARIO_ATUALIZA NOT NULL, 
  CONSTRAINT PK_TB_MORADOR_ENDERECO_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_OCORRENCIA_PF_ENVOLVIDA_LOG(
  NR_SEQ_LOG INTEGER,
  USU_EXECUTOR INTEGER CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_LOG_USU_EXECUTOR NOT NULL,
  DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_LOG_DT_EXECUTOR NOT NULL,
  COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_LOG_COMANDO_EXECUTADO NOT NULL,
  CD_OCORRENCIA INTEGER CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_LOG_CD_OCORRENCIA NOT NULL,
  CD_PESSOA_FISICA INTEGER CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_LOG_CD_PESSOA_FISICA NOT NULL,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_LOG_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_LOG_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_LOG_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_PF_ENVOLVIDA_LOG_DT_USUARIO_ATUALIZA NOT NULL, 
  CONSTRAINT PK_TB_CD_OCORRENCIA_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

/*
1 - A Iniciar
2 - Execução
3 - Análise
4 - Aguardando Terceiros   
5 - Finalizado
*/

CREATE TABLE TB_OCORRENCIA_LOG(
  NR_SEQ_LOG INTEGER,
  USU_EXECUTOR INTEGER CONSTRAINT NN_TB_OCORRENCIA_LOG_USU_EXECUTOR NOT NULL,
  DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_LOG_DT_EXECUTOR NOT NULL,
  COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_OCORRENCIA_LOG_COMANDO_EXECUTADO NOT NULL,
  CD_OCORRENCIA INTEGER CONSTRAINT NN_TB_OCORRENCIA_LOG_CD_OCORRENCIA NOT NULL,
  CD_PF_INFORMANTE INTEGER CONSTRAINT NN_TB_OCORRENCIA_LOG_CD_PF_INFORMANTE NOT NULL,
  DESC_ASSUNTO VARCHAR(50) CONSTRAINT NN_TB_OCORRENCIA_LOG_DESC_ASSUNTO NOT NULL,
  DESC_OCORRENCIA TEXT CONSTRAINT NN_TB_OCORRENCIA_LOG_DESC_OCORRENCIA NOT NULL,
  DT_OCORRENCIA TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_LOG_DT_OCORRENCIA NOT NULL,
  IE_SITUACAO CHAR(1) CONSTRAINT NN_TB_OCORRENCIA_LOG_IE_SITUACAO NOT NULL,
  DT_FIM TIMESTAMP,
  DESC_CONCLUSAO TEXT,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_OCORRENCIA_LOG_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_LOG_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_OCORRENCIA_LOG_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_OCORRENCIA_LOG_DT_USUARIO_ATUALIZA NOT NULL, 
  CONSTRAINT PK_TB_OCORRENCIA_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_ORCAMENTO_LOG(
  NR_SEQ_LOG INTEGER,
  USU_EXECUTOR INTEGER CONSTRAINT NN_TB_ORCAMENTO_LOG_USU_EXECUTOR NOT NULL,
  DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_ORCAMENTO_LOG_DT_EXECUTOR NOT NULL,
  COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_ORCAMENTO_LOG_COMANDO_EXECUTADO NOT NULL,
  CD_ORCAMENTO INTEGER CONSTRAINT NN_TB_ORCAMENTO_LOG_CD_ORCAMENTO NOT NULL,
  CD_ORDEM_SERVICO INTEGER,
  DT_ORCAMENTO TIMESTAMP CONSTRAINT NN_TB_ORCAMENTO_LOG_DT_ORCAMENTO NOT NULL,
  DT_FIM TIMESTAMP,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_ORCAMENTO_LOG_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_ORCAMENTO_LOG_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_ORCAMENTO_LOG_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_ORCAMENTO_LOG_DT_USUARIO_ATUALIZA NOT NULL,
  CONSTRAINT PK_TB_ORCAMENTO_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_ORDEM_SERVICO_LOG(
  NR_SEQ_LOG INTEGER,
  USU_EXECUTOR INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_USU_EXECUTOR NOT NULL,
  DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_DT_EXECUTOR NOT NULL,
  COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_COMANDO_EXECUTADO NOT NULL,
  CD_ORDEM_SERVICO INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_CD_ORDEM_SERVICO NOT NULL,
  CD_OCORRENCIA INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_CD_OCORRENCIA NOT NULL,
  CD_PF_EXECUTOR INTEGER,
  CD_PF_SOLICITANTE INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_CD_PF_SOLICITANTE NOT NULL,
  DESC_ASSUNTO VARCHAR(50) CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_DESC_ASSUNTO NOT NULL,
  DESC_ORDEM_SERVICO TEXT CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_DESC_ORDEM_SERVICO NOT NULL,
  DT_INICIO TIMESTAMP CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_DT_INICIO NOT NULL,
  DT_FIM TIMESTAMP,
  CD_CATG_ESTAGIO INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_CD_CATG_ESTAGIO NOT NULL,
  CD_VL_CATG_ESTAGIO INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_CD_VL_CATG_ESTAGIO NOT NULL,
  DESC_CONCLUSAO TEXT,
  CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_CD_USUARIO_CRIACAO NOT NULL,
  DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_DT_USUARIO_CRIACAO NOT NULL,   
  CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_CD_USUARIO_ATUALIZA NOT NULL,
  DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_ORDEM_SERVICO_LOG_DT_USUARIO_ATUALIZA NOT NULL,
  CONSTRAINT PK_TB_ORDEM_SERVICO_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_PESSOA_FISICA_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_PESSOA_FISICA_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_PESSOA_FISICA_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_PESSOA_FISICA_LOG_COMANDO_EXECUTADO NOT NULL, 
 CD_PESSOA_FISICA INTEGER CONSTRAINT NN_TB_PESSOA_FISICA_LOG_CD_PESSOA_FISICA NOT NULL,
 CD_PESSOA_JURIDICA INTEGER,
 CD_PROFISSAO INTEGER,
 NM_PESSOA_FISICA VARCHAR(50) CONSTRAINT NN_TB_PESSOA_FISICA_LOG_NM_PESSOA_FISICA NOT NULL,
 CPF VARCHAR(14) CONSTRAINT NN_TB_PESSOA_FISICA_LOG_CPF NOT NULL,
 RG VARCHAR(15) CONSTRAINT NN_TB_PESSOA_FISICA_LOG_RG NOT NULL,
 CD_CATG_ORG_RG INTEGER CONSTRAINT NN_TB_PESSOA_FISICA_CD_CATG_ORG_LOG_RG NOT NULL,
 CD_VL_CATG_ORG_RG INTEGER CONSTRAINT NN_TB_PESSOA_FISICA_CD_VL_CATG_LOG_ORG_RG NOT NULL,
 EMAIL VARCHAR(60),  
 DT_NASCIMENTO DATE CONSTRAINT NN_TB_PESSOA_FISICA_LOG_DT_NASCIMENTO NOT NULL,
 IE_SEXO CHAR(1) CONSTRAINT NN_TB_PESSOA_FISICA_LOG_IE_SEXO NOT NULL,
 IM_PERFIL OID,
 IE_ESTUDA CHAR(1),
 CD_INSTITUICAO INTEGER,
 DT_INICIO_CURSO DATE,
 DT_FIM_CURSO DATE, 
 CD_CATG_GRAU_ENSINO INTEGER,
 CD_VL_CATG_GRAU_ENSINO INTEGER,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PESSOA_FISICA_LOG_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PESSOA_FISICA_LOG_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PESSOA_FISICA_LOG_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PESSOA_FISICA_LOG_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_PESSAO_FISICA_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_PESSOA_JURIDICA_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_PESSOA_JURIDICA_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_PESSOA_JURIDICA_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_PESSOA_JURIDICA_LOG_COMANDO_EXECUTADO NOT NULL,
 CD_PESSOA_JURIDICA INTEGER CONSTRAINT NN_TB_PESSOA_JURIDICA_LOG_CD_PESSOA_JURIDICA NOT NULL,
 CNPJ VARCHAR(18) CONSTRAINT NN_TB_PESSAO_JURIDICA_LOG_CGC NOT NULL,
 NM_FANTASIA VARCHAR(50) CONSTRAINT NN_TB_PESSOA_JURIDICA_LOG_NM_FANTASIA NOT NULL,
 DESC_RAZAO VARCHAR(50) CONSTRAINT NN_TB_PESSOA_JURIDICA_LOG_DESC_RAZAO NOT NULL,
 DESC_ATIVIDADE TEXT,
 IM_PERFIL OID, 
 EMAIL VARCHAR(30), 
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PESSOA_JURIDICA_LOG_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PESSOA_JURIDICA_LOG_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PESSOA_JURIDICA_LOG_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PESSOA_JURIDICA_LOG_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_PESSAO_JURIDICA_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_PF_ENDERECO_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_PF_ENDERECO_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_PF_ENDERECO_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_PF_ENDERECO_LOG_COMANDO_EXECUTADO NOT NULL,
 NR_SEQUENCIA INTEGER CONSTRAINT NN_TB_PF_ENDERECO_LOG_NR_SEQUENCIA NOT NULL,
 CD_CATG_END INTEGER CONSTRAINT NN_TB_PF_ENDERECO_LOG_CD_CATG_END NOT NULL,
 CD_VL_CATG_END INTEGER CONSTRAINT NN_TB_PF_ENDERECO_LOG_CD_VL_CATG_END NOT NULL,
 CD_PESSOA_FISICA INTEGER CONSTRAINT NN_TB_PF_ENDERECO_LOG_CD_PESSOA_FISICA NOT NULL,
 CEP VARCHAR(9) CONSTRAINT NN_TB_PF_ENDERECO_LOG_CEP NOT NULL,
 RUA VARCHAR(50) CONSTRAINT NN_TB_PF_ENDERECO_LOG_RUA NOT NULL,
 NUMERO INTEGER CONSTRAINT NN_TB_PF_ENDERECO_LOG_NUMERO NOT NULL,
 BAIRRO VARCHAR(25) CONSTRAINT NN_TB_ENDERECO_LOG_BAIRRO NOT NULL,
 CIDADE VARCHAR(25) CONSTRAINT NN_TB_ENDERECO_LOG_CIDADE NOT NULL, 
 CD_CATG_ESTADO INTEGER CONSTRAINT NN_TB_PF_ENDERECO_LOG_CD_CATG_ESTADO NOT NULL,
 CD_VL_CATG_ESTADO INTEGER CONSTRAINT NN_TB_PF_ENDERECO_LOG_CD_VL_CATG_ESTADO NOT NULL,
 OBSERVACAO TEXT,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PF_ENDERECO_LOG_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PF_ENDERECO_LOG_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PF_ENDERECO_LOG_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PF_ENDERECO_LOG_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_PF_ENDERECO_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_PJ_ENDERECO_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_PJ_ENDERECO_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_PJ_ENDERECO_LOG_COMANDO_EXECUTADO NOT NULL,   
 NR_SEQUENCIA INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_LOG_NR_SEQUENCIA NOT NULL,
 CD_CATG_END INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_LOG_CD_CATG_END NOT NULL,
 CD_VL_CATG_END INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_LOG_CD_VL_CATG_END NOT NULL,
 CD_PESSOA_JURIDICA INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_LOG_CD_PESSOA_JURIDICA NOT NULL,
 CEP VARCHAR(9) CONSTRAINT NN_TB_PJ_ENDERECO_LOG_CEP NOT NULL,
 RUA VARCHAR(50) CONSTRAINT NN_TB_PJ_ENDERECO_LOG_RUA NOT NULL,
 NUMERO INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_LOG_NUMERO NOT NULL,
 BAIRRO VARCHAR(25) CONSTRAINT NN_TB_PJ_ENDERECO_LOG_BAIRRO NOT NULL,
 CIDADE VARCHAR(25) CONSTRAINT NN_TB_PJ_ENDERECO_LOG_CIDADE NOT NULL,
 CD_CATG_ESTADO INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_LOG_CD_CATG_ESTADO NOT NULL,
 CD_VL_CATG_ESTADO INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_LOG_CD_VL_CATG_ESTADO NOT NULL,
 OBSERVACAO TEXT,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_LOG_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PJ_ENDERECO_LOG_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PJ_ENDERECO_LOG_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PJ_ENDERECO_LOG_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_PJ_ENDERECO_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_PROFISSAO_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_PROFISSAO_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_PROFISSAO_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_PROFISSAO_LOG_COMANDO_EXECUTADO NOT NULL,
 CD_PROFISSAO INTEGER CONSTRAINT NN_TB_PROFISSAO_LOG_CD_PROFISSAO NOT NULL,
 NM_PROFISSAO VARCHAR(50) CONSTRAINT NN_TB_PROFISSAO_LOG_NM_PROFISSAO NOT NULL,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PROFISSAO_LOG_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PROFISSAO_LOG_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PROFISSAO_LOG_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PROFISSAO_LOG_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_PROFISSAO_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_RELACIONADOS_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_RELACIONADOS_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_RELACIONADOS_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_RELACIONADOS_LOG_COMANDO_EXECUTADO NOT NULL,
 CD_PESSOA_FISICA_1 INTEGER CONSTRAINT NN_TB_RELACIONADOS_LOG_CD_PESSOA_FISICA_1  NOT NULL,
 CD_PESSOA_FISICA_2 INTEGER CONSTRAINT NN_TB_RELACIONADOS_LOG_CD_PESSOA_FISICA_2 NOT NULL,
 CD_CATG_RELAC_PF_1 INTEGER CONSTRAINT NN_TB_RELACIONADOS_LOG_CD_CATG_RELAC_1 NOT NULL,
 CD_VL_CATG_RELAC_PF_1 INTEGER CONSTRAINT NN_TB_RELACIONADOS_LOG_CD_VL_CATG_RELAC_1 NOT NULL,
 CD_CATG_RELAC_PF_2 INTEGER CONSTRAINT NN_TB_RELACIONADOS_LOG_CD_CATG_RELAC_1 NOT NULL,
 CD_VL_CATG_RELAC_PF_2 INTEGER CONSTRAINT NN_TB_RELACIONADOS_LOG_CD_VL_CATG_RELAC_1 NOT NULL,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_RELACIONADOS_LOG_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_RELACIONADOS_LOG_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_RELACIONADOS_LOG_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_RELACIONADOS_LOG_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_RELACIONADOS_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_SERVICO_ADICIONAL_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_SERVICO_ADICIONAL_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_SERVICO_ADICIONAL_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_SERVICO_ADICIONAL_LOG_COMANDO_EXECUTADO NOT NULL,
 CD_SERV_ADICIONAL INTEGER CONSTRAINT NN_TB_SERVICO_ADICIONAL_LOG_CD_SERV_ADICIONAL NOT NULL,
 CD_ORDEM_SERVICO INTEGER, 
 CD_PESSOA_FISICA INTEGER,
 CD_CATG_SERVICO INTEGER CONSTRAINT NN_TB_SERVICO_ADICIONAL_CD_CATG_SERVICO NOT NULL,
 CD_CATG_VL_SERVICO INTEGER CONSTRAINT NN_TB_SERVICO_ADICIONAL_CD_CATG_VL_SERVICO NOT NULL,
 CD_SETOR INTEGER,
 CD_VAGA INTEGER,
 DT_INICIO TIMESTAMP CONSTRAINT NN_TB_SERVICO_ADICIIONAL_LOG_DT_INICIO NOT NULL,
 DT_FIM TIMESTAMP,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_SERVICO_ADICIONAL_LOG_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_SERVICO_ADICIONAL_LOG_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_SERVICO_ADICIONAL_LOG_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_SERVICO_ADICIONAL_LOG_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_SERVICO_ADICIONAL_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_SETOR_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_SETOR_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_SETOR_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_SETOR_LOG_COMANDO_EXECUTADO NOT NULL,  
 CD_SETOR SERIAL CONSTRAINT NN_TB_SETOR_LOG_CD_SETOR NOT NULL,
 CD_CONDOMINIO INTEGER CONSTRAINT NN_TB_SETOR_LOG_CD_CONDOMINIO NOT NULL,
 NM_SETOR VARCHAR(50) CONSTRAINT NN_TB_SETOR_LOG_NM_SETOR NOT NULL,
 OBSERVACAO TEXT,
 IM_PERFIL OID,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_SETOR_LOG_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_SETOR_LOG_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_SSETOR_LOG_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_SETOR_LOG_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_SETOR_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_USUARIO_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_USUARIO_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_USUARIO_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_USUARIO_LOG_COMANDO_EXECUTADO NOT NULL,
 CD_USUARIO INTEGER CONSTRAINT NN_TB_USUARIO_LOG_CD_PF_USU NOT NULL,
 CD_USU_BANCO VARCHAR(40) CONSTRAINT NN_TB_USUARIO_LOG_CD_USU_BANCO NOT NULL, 
 LOGIN VARCHAR(60) CONSTRAINT NN_TB_USUARIO_LOGIN_LOGIN NOT NULL,
 NIVEL INTEGER CONSTRAINT NN_TB_USUARIO_LOG_NIVEL NOT NULL,
 IE_STATUS CHAR(1) CONSTRAINT NN_TB_USUARIO_LOG_IE_STATUS NOT NULL,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_USUARIO_LOG_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_USUARIO_LOG_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_USUARIO_LOG_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_USUARIO_LOG_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_USUARIO_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_VAGA_GARAGEM_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_VAGA_GARAGEM_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_VAGA_GARAGEM_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_VAGA_GARAGEM_LOG_COMANDO_EXECUTADO NOT NULL,
 CD_VAGA INTEGER CONSTRAINT NN_TB_VAGA_GARAGEM_LOG_CD_VAGA NOT NULL,
 DS_VAGA VARCHAR(25) CONSTRAINT NN_TB_VAGA_GARAGEM_DS_VAGA NOT NULL,
 CD_SETOR INTEGER CONSTRAINT NN_TB_VAGA_GARAGEM_CD_SETOR NOT NULL,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_VAGA_GARAGEM_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_VAGA_GARAGEM_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_VAGA_GARAGEM_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_VAGA_GARAGEM_DT_USUARIO_ATUALIZA NOT NULL,
CONSTRAINT PK_TB_VAGA_GARAGEM_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);


CREATE TABLE TB_PF_TELEFONE_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_PF_TELEFONE_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_PF_TELEFONE_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_PF_TELEFONE_LOG_COMANDO_EXECUTADO NOT NULL,
 CD_PF_FONE INTEGER CONSTRAINT NN_TB_PF_TELEFONE_LOG_CD_PF_FONE NOT NULL,
 CD_PESSOA_FISICA INTEGER CONSTRAINT NN_TB_PF_TELEFONE_LOG_CD_PESSOA_FISICA NOT NULL,
 FONE VARCHAR(14) CONSTRAINT NN_TB_PF_TELEFONE_FONE NOT NULL,
 OBSERVACAO TEXT,
 CD_CATG_FONE_PF INTEGER CONSTRAINT NN_TB_PF_TELEFONE_CD_CATG_FONE_PF NOT NULL,
 CD_CATG_VL_FONE_PF INTEGER CONSTRAINT NN_TB_PF_TELEFONE_CD_CATG_VL_FONE_PF NOT NULL,
 CD_CATG_OPERADORA INTEGER CONSTRAINT NN_TB_PF_TELEFONE_LOG_CD_CATG_OPERADORA NOT NULL,
 CD_CATG_VL_OPERADORA INTEGER CONSTRAINT NN_TB_PF_TELEFONE_LOG_CD_CATG_VL_OPERADORA NOT NULL,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PF_TELEFONE_CD_USUARIO_CRIACAO NOT NULL,
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PF_TELEFONE_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PF_TELEFONE_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PF_TELEFONE_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_PF_TELEFONE_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);

CREATE TABLE TB_PJ_TELEFONE_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_PJ_TELEFONE_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_PJ_TELEFONE_LOG_COMANDO_EXECUTADO NOT NULL,
 CD_PJ_FONE INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_LOG_CD_PJ_FONE NOT NULL,
 CD_PESSOA_JURIDICA INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_LOG_CD_PESSOA_JURIDICA NOT NULL,
 FONE VARCHAR(14) CONSTRAINT NN_TB_PJ_TELEFONE_FONE NOT NULL,
 OBSERVACAO TEXT,
 CD_CATG_FONE_PJ INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_CD_CATG_FONE_PJ NOT NULL,
 CD_CATG_VL_FONE_PJ INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_CD_CATG_VL_FONE_PJ NOT NULL,
 CD_CATG_OPERADORA INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_LOG_CD_CATG_OPERADORA NOT NULL,
 CD_CATG_VL_OPERADORA INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_LOG_CD_CATG_VL_OPERADORA NOT NULL,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_CD_USUARIO_CRIACAO NOT NULL, 
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_PJ_TELEFONE_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_PJ_TELEFONE_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_PJ_TELEFON_LOG_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG) 
);

CREATE TABLE TB_INSTITUICAO_ENSINO_LOG(
 NR_SEQ_LOG INTEGER,
 USU_EXECUTOR INTEGER CONSTRAINT NN_TB_PJ_TELEFONE_LOG_USU_EXECUTOR NOT NULL,
 DT_EXECUTOR TIMESTAMP CONSTRAINT NN_TB_PJ_TELEFONE_LOG_DT_EXECUTOR NOT NULL,
 COMANDO_EXECUTADO CHAR(1) CONSTRAINT NN_TB_PJ_TELEFONE_LOG_COMANDO_EXECUTADO NOT NULL,
 CD_INSTITUICAO INTEGER CONSTRAINT NN_TB_INSTITUICAO_ENSINO_LOG_CD_INSTITUICAO NOT NULL,
 DS_INSTITUICAO VARCHAR(50) CONSTRAINT NN_TB_INSTITUICAO_ENSINO_DS_INSTITUICAO NOT NULL,
 CD_CATG_INSTITUICAO INTEGER CONSTRAINT NN_TB_INSTITUICAO_ENSINO_CD_CATG_INSTITUICAO NOT NULL, 
 CD_CATG_VL_INSTITUICAO INTEGER CONSTRAINT NN_TB_INSTITUICAO_ENSINO_CD_CATG_VL_INSTITUICAO NOT NULL,
 CD_USUARIO_CRIACAO INTEGER CONSTRAINT NN_TB_INSTITUICAO_ENSINO_CD_USUARIO_CRIACAO NOT NULL, 
 DT_USUARIO_CRIACAO TIMESTAMP CONSTRAINT NN_TB_INSTITUICAO_ENSINO_DT_USUARIO_CRIACAO NOT NULL,   
 CD_USUARIO_ATUALIZA INTEGER CONSTRAINT NN_TB_INSTITUICAO_ENSINO_CD_USUARIO_ATUALIZA NOT NULL,
 DT_USUARIO_ATUALIZA TIMESTAMP CONSTRAINT NN_TB_INSTITUICAO_ENSINO_DT_USUARIO_ATUALIZA NOT NULL,
 CONSTRAINT PK_TB_INSTITUICAO_ENSINO_NR_SEQ_LOG PRIMARY KEY(NR_SEQ_LOG)
);



ALTER TABLE TB_USUARIO_LOG ADD CONSTRAINT FK_TB_USUARIO_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_SETOR_LOG ADD CONSTRAINT FK_TB_SETOR_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_SERVICO_ADICIONAL_LOG ADD CONSTRAINT FK_TB_SERVICO_ADICIONAL_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_RELACIONADOS_LOG ADD CONSTRAINT FK_TB_RELACIONADOS_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PROFISSAO_LOG ADD CONSTRAINT FK_TB_PROFISSAO_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PJ_ENDERECO_LOG ADD CONSTRAINT FK_TB_PJ_ENDERECO_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PF_ENDERECO_LOG ADD CONSTRAINT FK_TB_PF_ENDERECO_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PESSOA_JURIDICA_LOG ADD CONSTRAINT FK_TB_PESSOA_JURIDICA_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PESSOA_FISICA_LOG ADD CONSTRAINT FK_TB_PESSOA_FISICA_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_ORDEM_SERVICO_LOG ADD CONSTRAINT FK_TB_ORDEM_SERVICO_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_ORCAMENTO_LOG ADD CONSTRAINT FK_TB_ORCAMENTO_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_OCORRENCIA_LOG ADD CONSTRAINT FK_TB_OCORRENCIA_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_OCORRENCIA_PF_ENVOLVIDA_LOG ADD CONSTRAINT FK_TB_OCORRENCIA_PF_ENVOLVIDA_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_MORADOR_ENDERECO_LOG ADD CONSTRAINT FK_TB_MORADOR_ENDERECO_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_ITENS_ORCAMENTO_LOG ADD CONSTRAINT FK_TB_ITENS_ORCAMENTO_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_CONDOMINIO_LOG ADD CONSTRAINT FK_TB_CONDOMINIO_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_CATEGORIA_VALOR_LOG ADD CONSTRAINT FK_TB_CATEGORIA_VALOR_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_CATEGORIA_LOG ADD CONSTRAINT FK_TB_CATEGORIA_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_APARTAMENTO_LOG ADD CONSTRAINT FK_TB_APARTAMENTO_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_VAGA_GARAGEM_LOG ADD CONSTRAINT FK_TB_VAGA_GARAGEM_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PF_TELEFONE_LOG ADD CONSTRAINT FK_TB_PF_TELEFONE_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_PJ_TELEFONE_LOG ADD CONSTRAINT FK_TB_PJ_TELEFONE_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);

ALTER TABLE TB_INSTITUICAO_ENSINO_LOG ADD CONSTRAINT FK_TB_INSTITUICAO_ENSINO_LOG_USU_EXECUTOR 
FOREIGN KEY(USU_EXECUTOR) REFERENCES TB_USUARIO(CD_USUARIO);


CREATE SEQUENCE seq_tb_apartamento_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_categoria_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_categoria_valos_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_categoria_valor_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_condominio_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_itens_orcamento_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_morador_endereco_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_ocorrencia_pf_envolvida_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_ocorrencia_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_orcamento_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_ordem_servico_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_pessoa_fisica_log
INCREMENT 1 
MINVALUE 1 
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_pessoa_juridica_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_pf_endereco_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_pj_endereco_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_profissao_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_relacionados_log
INCREMENT 1
MINVALUE 1 
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_servico_adicional_log
INCREMENT 1
MINVALUE 1 
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_setor_log
INCREMENT 1
MINVALUE 1 
MAXVALUE 9223372036854775807
START 1 
NO CYCLE;

CREATE SEQUENCE seq_tb_usuario_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_vaga_garagem_log
INCREMENT 1
MINVALUE 1 
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_pf_telefone_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_pj_telefone_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;

CREATE SEQUENCE seq_tb_instituicao_ensino_log
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
NO CYCLE;


-------------------------Usuario---------------------------

CREATE SEQUENCE seq_cd_usuario;

DROP GROUP IF EXISTS administrador;
CREATE GROUP administrador;

	GRANT SELECT, UPDATE ON pg_authid TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_apartamento TO administrador;
	GRANT SELECT, INSERT ON tb_apartamento_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_categoria TO administrador;
	GRANT SELECT, INSERT ON tb_categoria_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_categoria_valor TO administrador;
	GRANT SELECT, INSERT ON tb_categoria_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_condominio TO administrador;
	GRANT SELECT, INSERT ON tb_condominio_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_instituicao_ensino TO administrador;
	GRANT SELECT, INSERT ON tb_instituicao_ensino_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_itens_orcamento TO administrador;
	GRANT SELECT, INSERT  ON tb_itens_orcamento_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_morador_endereco TO administrador;
	GRANT SELECT, INSERT ON tb_morador_endereco_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_ocorrencia TO administrador;
	GRANT SELECT, INSERT ON tb_ocorrencia_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_ocorrencia_pf_envolvida TO administrador;
	GRANT SELECT, INSERT ON tb_ocorrencia_pf_envolvida_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_orcamento TO administrador;
	GRANT SELECT, INSERT ON tb_orcamento_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_ordem_servico TO administrador;
	GRANT SELECT, INSERT ON tb_ordem_servico_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pessoa_fisica TO administrador;
	GRANT SELECT, INSERT ON tb_pessoa_fisica_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pessoa_juridica TO administrador;
	GRANT SELECT, INSERT ON tb_pessoa_juridica_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pf_endereco TO administrador;
	GRANT SELECT, INSERT ON tb_pf_endereco_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pf_telefone TO administrador;
	GRANT SELECT, INSERT ON tb_pf_telefone_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pj_endereco TO administrador;
	GRANT SELECT, INSERT ON tb_pj_endereco_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pj_telefone TO administrador;
	GRANT SELECT, INSERT ON tb_pj_telefone_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_profissao TO administrador;
	GRANT SELECT, INSERT ON tb_profissao_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_relacionados TO administrador;
	GRANT SELECT, INSERT ON tb_relacionados_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_servico_adicional TO administrador;
	GRANT SELECT, INSERT ON tb_servico_adicional_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_setor TO administrador;
	GRANT SELECT, INSERT ON tb_setor_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_usuario TO administrador;
	GRANT SELECT, INSERT ON tb_usuario_log TO administrador;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_vaga_garagem TO administrador;
	GRANT SELECT, INSERT ON tb_vaga_garagem_log TO administrador;

DROP GROUP IF EXISTS atendente;	
CREATE GROUP atendente;

	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_apartamento TO atendente;
	GRANT INSERT ON tb_apartamento_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_categoria TO atendente;
	GRANT INSERT ON tb_categoria_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_categoria_valor TO atendente;
	GRANT INSERT ON tb_categoria_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_condominio TO atendente;
	GRANT INSERT ON tb_condominio_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_instituicao_ensino TO atendente;
	GRANT INSERT ON tb_instituicao_ensino_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_itens_orcamento TO atendente;
	GRANT INSERT  ON tb_itens_orcamento_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_morador_endereco TO atendente;
	GRANT INSERT ON tb_morador_endereco_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_ocorrencia TO atendente;
	GRANT INSERT ON tb_ocorrencia_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_ocorrencia_pf_envolvida TO atendente;
	GRANT INSERT ON tb_ocorrencia_pf_envolvida_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_orcamento TO atendente;
	GRANT INSERT ON tb_orcamento_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_ordem_servico TO atendente;
	GRANT INSERT ON tb_ordem_servico_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pessoa_fisica TO atendente;
	GRANT INSERT ON tb_pessoa_fisica_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pessoa_juridica TO atendente;
	GRANT INSERT ON tb_pessoa_juridica_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pf_endereco TO atendente;
	GRANT INSERT ON tb_pf_endereco_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pf_telefone TO atendente;
	GRANT INSERT ON tb_pf_telefone_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pj_endereco TO atendente;
	GRANT INSERT ON tb_pj_endereco_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pj_telefone TO atendente;
	GRANT INSERT ON tb_pj_telefone_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_profissao TO atendente;
	GRANT INSERT ON tb_profissao_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_relacionados TO atendente;
	GRANT INSERT ON tb_relacionados_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_servico_adicional TO atendente;
	GRANT INSERT ON tb_servico_adicional_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_setor TO atendente;
	GRANT INSERT ON tb_setor_log TO atendente;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_vaga_garagem TO atendente;
	GRANT INSERT ON tb_vaga_garagem_log TO atendente;

DROP GROUP IF EXISTS usuario;
CREATE GROUP usuario;

	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_apartamento TO usuario;
	GRANT INSERT ON tb_apartamento_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_categoria TO usuario;
	GRANT INSERT ON tb_categoria_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_categoria_valor TO usuario;
	GRANT INSERT ON tb_categoria_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_condominio TO usuario;
	GRANT INSERT ON tb_condominio_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_instituicao_ensino TO usuario;
	GRANT INSERT ON tb_instituicao_ensino_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_itens_orcamento TO usuario;
	GRANT INSERT  ON tb_itens_orcamento_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_morador_endereco TO usuario;
	GRANT INSERT ON tb_morador_endereco_log TO usuario;
	GRANT SELECT ON tb_ocorrencia TO usuario;
	GRANT INSERT ON tb_ocorrencia_log TO usuario;
	GRANT SELECT ON tb_ocorrencia_pf_envolvida TO usuario;
	GRANT INSERT ON tb_ocorrencia_pf_envolvida_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_orcamento TO usuario;
	GRANT INSERT ON tb_orcamento_log TO usuario;
	GRANT SELECT ON tb_ordem_servico TO usuario;
	GRANT INSERT ON tb_ordem_servico_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pessoa_fisica TO usuario;
	GRANT INSERT ON tb_pessoa_fisica_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pessoa_juridica TO usuario;
	GRANT INSERT ON tb_pessoa_juridica_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pf_endereco TO usuario;
	GRANT INSERT ON tb_pf_endereco_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pf_telefone TO usuario;
	GRANT INSERT ON tb_pf_telefone_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pj_endereco TO usuario;
	GRANT INSERT ON tb_pj_endereco_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_pj_telefone TO usuario;
	GRANT INSERT ON tb_pj_telefone_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_profissao TO usuario;
	GRANT INSERT ON tb_profissao_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_relacionados TO usuario;
	GRANT INSERT ON tb_relacionados_log TO usuario;
	GRANT SELECT ON tb_servico_adicional TO usuario;
	GRANT INSERT ON tb_servico_adicional_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_setor TO usuario;
	GRANT INSERT ON tb_setor_log TO usuario;
	GRANT SELECT, INSERT, UPDATE, DELETE ON tb_vaga_garagem TO usuario;
	GRANT INSERT ON tb_vaga_garagem_log TO usuario;
	
INSERT INTO TB_PESSOA_FISICA(
NM_PESSOA_FISICA,
CPF,
RG,
CD_CATG_ORG_RG,
CD_VL_CATG_ORG_RG,
DT_NASCIMENTO,
IE_SEXO)
VALUES
('Administrador',
 '000.000.000-00',
 '00000000',
  1, 
  1,
  '01/01/2000',
  'M'); 	
	
--fc_criar_usuario(login,senha,nivel,status,cd_pessoa_fisica,login_trocar)	

CREATE OR REPLACE FUNCTION fc_criar_usuario (varchar, varchar, integer, varchar, integer, varchar) RETURNS varchar AS
$$
DECLARE 

	existe INTEGER;
	existe2 INTEGER;
	existe3 INTEGER;
	existe4 INTEGER;
	existe5 INTEGER;
	aux_nivel INTEGER;
			
BEGIN
	
	SELECT count(*)
	INTO existe		
	FROM tb_usuario
	WHERE login = $1;
	
	SELECT count(*)
	INTO existe2
	FROM tb_usuario
	WHERE cd_usuario = $5;
	
	SELECT count(*)
	INTO existe3
	FROM tb_pessoa_fisica
	WHERE cd_pessoa_fisica = $5;
	
	SELECT count(*)
	INTO existe4
	FROM tb_usuario
	WHERE cd_usuario = $5
	AND cd_usu_banco = $1;
	
	SELECT count(*)
	INTO existe5		
	FROM tb_usuario
	WHERE login = $6;
	
	IF (existe3 = 1) THEN
	
		IF (existe2 = 0) THEN
							
			IF (existe = 0) THEN

				EXECUTE 'CREATE USER "' || $5 || '" WITH PASSWORD ''' || $2 || '''';
							
				IF ($3 = 1) THEN 
		
					EXECUTE 'ALTER GROUP administrador ADD USER "' || $5 || '"';	
					
					EXECUTE 'ALTER USER "' || $5 || '" CREATEUSER';
				
				ELSIF ($3 = 2) THEN
		
					EXECUTE 'ALTER GROUP atendente ADD USER "' || $5 || '"';	
					
					EXECUTE 'ALTER USER "' || $5 || '" NOCREATEUSER';
	
				ELSIF ($3 = 3) THEN
		
					EXECUTE 'ALTER GROUP usuario ADD USER "' || $5 || '"';
					
					EXECUTE 'ALTER USER "' || $5 || '" NOCREATEUSER';
		
				END IF;
		
				IF ($4 = 'I') THEN
		
					UPDATE pg_authid SET
					rolcanlogin = false
					WHERE rolname = cd_usu_v;		
				
				END IF;
				
				INSERT INTO tb_usuario SELECT $5, 
											  $5,
											  $1,
											  $3, 
											  $4, 
											  1,
											  now(),
											  1,
											  now();
											  
				RETURN 'Usuario criado com sucesso!';
		 				
			ELSE
			
				RETURN 'Já existe um usuário cadastrado com esse nome!';
			
			END IF;
		
		ELSE
												
			IF (existe4 = 0) THEN

				IF ($6 IS NOT NULL) THEN 				
		
					IF (existe5 = 0) THEN
													
						UPDATE tb_usuario SET	
							login = $6							
						WHERE cd_usuario = $5;						
						
					ELSE
				
						RETURN 'A outro perfil que já possui uma conta de usuário com esse nome!';
				
					END IF;

				END IF;

				IF ($2 IS NOT NULL) THEN				
			
					EXECUTE 'ALTER USER "' || $5 || '" WITH ENCRYPTED PASSWORD ''' || $2 || '''';
					
				END IF;
				
				IF ($4 IS NOT NULL) THEN 
				
					IF ($4 = 'I') THEN
		
						UPDATE pg_authid SET
						rolcanlogin = false
						WHERE rolname = $5::VARCHAR(60);	

						UPDATE tb_usuario SET	
							IE_STATUS = $4
						WHERE cd_usuario = $5;											
				
					END IF;
					
					IF ($4 = 'A') THEN
		
						UPDATE pg_authid SET
						rolcanlogin = true
						WHERE rolname = $5::VARCHAR(60);	

						UPDATE tb_usuario SET	
							IE_STATUS = $4
						WHERE cd_usuario = $5;											
				
					END IF;
					
				END IF;
						
				IF($3 IS NOT NULL) THEN
			
					SELECT NIVEL
					INTO aux_nivel
					FROM tb_usuario
					WHERE cd_usuario = $5;
					
					UPDATE tb_usuario SET	
						nivel = $3,
						CD_USUARIO_CRIACAO =  user::INTEGER,
						DT_USUARIO_CRIACAO = now(),
						CD_USUARIO_ATUALIZA = user::INTEGER,
					    DT_USUARIO_ATUALIZA = now()
					WHERE cd_usuario = $5;	
		
					IF (aux_nivel = 1) THEN 
		
						EXECUTE 'ALTER GROUP administrador DROP USER "' || $5 || '"';
			
					ELSIF (aux_nivel = 2) THEN
		
						EXECUTE 'ALTER GROUP atendente DROP USER "' || $5 || '"';	
							
					ELSIF (aux_nivel = 3) THEN
		
						EXECUTE 'ALTER GROUP usuario DROP USER "' || $5 || '"';
		
					END IF;		
		
					IF ($3 = 1) THEN 
		
						EXECUTE 'ALTER GROUP administrador ADD USER "' || $5 || '"';
						
						EXECUTE 'ALTER USER "' || $5 || '" CREATEUSER';
			
					ELSIF ($3 = 2) THEN
		
						EXECUTE 'ALTER GROUP atendente ADD USER "' || $5 || '"';	
						
						EXECUTE 'ALTER USER "' || $5 || '" NOCREATEUSER';
		
					ELSIF ($3 = 3) THEN
		
						EXECUTE 'ALTER GROUP usuario ADD USER "' || $5 || '"';	
						
						EXECUTE 'ALTER USER "' || $5 || '" NOCREATEUSER';
		
					END IF;
					
					RETURN 'Usuario alterado com sucesso!';
									
				END IF;
						
				UPDATE tb_usuario SET 
					CD_USUARIO_CRIACAO = user::INTEGER,
					DT_USUARIO_CRIACAO = now(),
					CD_USUARIO_ATUALIZA = user::INTEGER,
					DT_USUARIO_ATUALIZA = now()
			WHERE CD_USUARIO = $5;
			
			RETURN 'Usuario alterado com sucesso!';

			END IF;
			
		END IF;
	
	ELSE
	
		RETURN 'Não existe este perfil';
	
	END IF;
			
	RETURN null;
END;
$$ LANGUAGE 'plpgsql'; 

SELECT fc_criar_usuario('administrador','123456',1,'A',1,NULL);


CREATE OR REPLACE FUNCTION fc_criar_usuario (varchar, varchar, integer, varchar, integer, varchar) RETURNS varchar AS
$$
DECLARE 

	existe INTEGER;
	existe2 INTEGER;
	existe3 INTEGER;
	existe4 INTEGER;
	existe5 INTEGER;
	aux_nivel INTEGER;
			
BEGIN
	
	SELECT count(*)
	INTO existe		
	FROM tb_usuario
	WHERE login = $1;
	
	SELECT count(*)
	INTO existe2
	FROM tb_usuario
	WHERE cd_usuario = $5;
	
	SELECT count(*)
	INTO existe3
	FROM tb_pessoa_fisica
	WHERE cd_pessoa_fisica = $5;
	
	SELECT count(*)
	INTO existe4
	FROM tb_usuario
	WHERE cd_usuario = $5
	AND cd_usu_banco = $1;
	
	SELECT count(*)
	INTO existe5		
	FROM tb_usuario
	WHERE login = $6;
	
	IF (existe3 = 1) THEN
	
		IF (existe2 = 0) THEN
							
			IF (existe = 0) THEN

				EXECUTE 'CREATE USER "' || $5 || '" WITH PASSWORD ''' || $2 || '''';
							
				IF ($3 = 1) THEN 
		
					EXECUTE 'ALTER GROUP administrador ADD USER "' || $5 || '"';	
					
					EXECUTE 'ALTER USER "' || $5 || '" CREATEUSER';
				
				ELSIF ($3 = 2) THEN
		
					EXECUTE 'ALTER GROUP atendente ADD USER "' || $5 || '"';	
					
					EXECUTE 'ALTER USER "' || $5 || '" NOCREATEUSER';
	
				ELSIF ($3 = 3) THEN
		
					EXECUTE 'ALTER GROUP usuario ADD USER "' || $5 || '"';
					
					EXECUTE 'ALTER USER "' || $5 || '" NOCREATEUSER';
		
				END IF;
		
				IF ($4 = 'I') THEN
		
					UPDATE pg_authid SET
					rolcanlogin = false
					WHERE rolname = cd_usu_v;		
				
				END IF;
				
				INSERT INTO tb_usuario SELECT $5, 
											  $5,
											  $1,
											  $3, 
											  $4, 
											  user::INTEGER,
											  now(),
											  user::INTEGER,
											  now();
											  
				RETURN 'Usuario criado com sucesso!';
		 				
			ELSE
			
				RETURN 'Já existe um usuário cadastrado com esse nome!';
			
			END IF;
		
		ELSE
												
			IF (existe4 = 0) THEN

				IF ($6 IS NOT NULL) THEN 				
		
					IF (existe5 = 0) THEN
													
						UPDATE tb_usuario SET	
							login = $6							
						WHERE cd_usuario = $5;						
						
					ELSE
				
						RETURN 'A outro perfil que já possui uma conta de usuário com esse nome!';
				
					END IF;

				END IF;

				IF ($2 IS NOT NULL) THEN				
			
					EXECUTE 'ALTER USER "' || $5 || '" WITH ENCRYPTED PASSWORD ''' || $2 || '''';
					
				END IF;
				
				IF ($4 IS NOT NULL) THEN 
				
					IF ($4 = 'I') THEN
		
						UPDATE pg_authid SET
						rolcanlogin = false
						WHERE rolname = $5::VARCHAR(60);	

						UPDATE tb_usuario SET	
							IE_STATUS = $4
						WHERE cd_usuario = $5;	
				
					END IF;
					
					IF ($4 = 'A') THEN
		
						UPDATE pg_authid SET
						rolcanlogin = true
						WHERE rolname = $5::VARCHAR(60);	

						UPDATE tb_usuario SET	
							IE_STATUS = $4
						WHERE cd_usuario = $5;											
				
					END IF;
					
				END IF;
						
				IF($3 IS NOT NULL) THEN
			
					SELECT NIVEL
					INTO aux_nivel
					FROM tb_usuario
					WHERE cd_usuario = $5;
					
					UPDATE tb_usuario SET	
						nivel = $3,
						CD_USUARIO_CRIACAO = user::INTEGER,
						DT_USUARIO_CRIACAO = now(),
						CD_USUARIO_ATUALIZA = user::INTEGER,
					    DT_USUARIO_ATUALIZA = now()
					WHERE cd_usuario = $5;	
		
					IF (aux_nivel = 1) THEN 
		
						EXECUTE 'ALTER GROUP administrador DROP USER "' || $5 || '"';
			
					ELSIF (aux_nivel = 2) THEN
		
						EXECUTE 'ALTER GROUP atendente DROP USER "' || $5 || '"';	
							
					ELSIF (aux_nivel = 3) THEN
		
						EXECUTE 'ALTER GROUP usuario DROP USER "' || $5 || '"';
		
					END IF;		
		
					IF ($3 = 1) THEN 
		
						EXECUTE 'ALTER GROUP administrador ADD USER "' || $5 || '"';
						
						EXECUTE 'ALTER USER "' || $5 || '" CREATEUSER';
			
					ELSIF ($3 = 2) THEN
		
						EXECUTE 'ALTER GROUP atendente ADD USER "' || $5 || '"';	
						
						EXECUTE 'ALTER USER "' || $5 || '" NOCREATEUSER';
		
					ELSIF ($3 = 3) THEN
		
						EXECUTE 'ALTER GROUP usuario ADD USER "' || $5 || '"';	
						
						EXECUTE 'ALTER USER "' || $5 || '" NOCREATEUSER';
		
					END IF;
					
					RETURN 'Usuario alterado com sucesso!';
									
				END IF;
						
				UPDATE tb_usuario SET 
					CD_USUARIO_CRIACAO = user::INTEGER,
					DT_USUARIO_CRIACAO = now(),
					CD_USUARIO_ATUALIZA = user::INTEGER,
					DT_USUARIO_ATUALIZA = now()
			WHERE CD_USUARIO = $5;
			
			RETURN 'Usuario alterado com sucesso!';

			END IF;
			
		END IF;
	
	ELSE
	
		RETURN 'Não existe este perfil';
	
	END IF;
			
	RETURN null;
END;
$$ LANGUAGE 'plpgsql'; 

INSERT INTO TB_CATEGORIA(
DESC_CATEGORIA)
VALUES
('Unidade Federativa'),
('Estado'),
('Estagio ordem de serviço e ocorrência'),
('Parentesco'),
('Fone pessoa física'),
('Fone pessoa juridica'),
('Grau de escolaridade'),
('Tipo de Instituição'),
('Endereço'),
('Operadora');


INSERT INTO TB_CATEGORIA_VALOR(
 CD_CATEGORIA,
 DESC_VL_CATG) 
VALUES
(1,'AC'),
(1,'AL'),
(1,'AP'),
(1,'AM'),
(1,'BA'),
(1,'CE'),
(1,'DF'),
(1,'ES'),
(1,'GO'),
(1,'MA'),
(1,'MT'),
(1,'MS'),
(1,'MG'),
(1,'PA'),
(1,'PB'),
(1,'PR'),
(1,'PE'),
(1,'PI'),
(1,'RJ'),
(1,'RN'),
(1,'RS'),
(1,'RO'),
(1,'RR'),
(1,'SC'),
(1,'SP'),
(1,'SE'),
(1,'TO'),
(2,'Acre'),
(2,'Alagoas'),
(2,'Amapá'),
(2,'Amazonas'),
(2,'Bahia'),
(2,'Ceará'),
(2,'Distrito Federal'),
(2,'Espírito Santo'),
(2,'Goiás'),
(2,'Maranhão'),
(2,'Mato Grosso'),
(2,'Mato Grosso do Sul'),
(2,'Minas Gerais'),
(2,'Pará'),
(2,'Paraíba'),
(2,'Paraná'),
(2,'Pernambuco'),
(2,'Piuaí'),
(2,'Rio de Janeiro'),
(2,'Rio Grande do Norte'),
(2,'Rio Grande do Sul'),
(2,'Rondônia'),
(2,'Roraima'),
(2,'Santa Catarina'),
(2,'São Paulo'),
(2,'Sergipe'),
(2,'Tocantins'),
(3,'A Iniciar'),
(3,'Execução'),
(3,'Análise'),
(3,'Finalizado'),
(4,'Pai'),
(4,'Mãe'),
(4,'Filho'),
(4,'Filha'),
(4,'Nora'),
(4,'Genro'),
(4,'Cunhado'),
(4,'Vô'),
(4,'Vó'),
(4,'Neto'),
(4,'Neta'),
(4,'Esposa'),
(4,'Marido'),
(4,'Namorado'),
(4,'Namorada'),
(4,'Noivo'),
(4,'Noiva'),
(4,'Amigo'),
(4,'Amiga'),
(5,'Residencial'),
(5,'Comercial'),
(5,'Celular'),
(5,'Contato Extra'),
(6,'Central'),
(6,'Fax'),
(6,'Ramal Direto'),
(6,'Celular'),
(7,'Primario'),
(7,'Ensino Fundamental'),
(7,'Ensino Médio'),
(7,'Curso Técnico'),
(7,'Ensino Superior'),
(7,'Pós-Graduação'),
(7,'Mestrado'),
(7,'Doutorado'),
(8,'Escola Municipal'),
(8,'Escola Estadual'),
(8,'Escola Particular'),
(8,'Universidade Particula'),
(8,'Universidade Federal'),
(8,'Universidade Estadual'),
(8,'Universidade Municipal'),
(8,'Cursos Tecnológicos'),
(8,'Cursos Técnicos'),
(9,'Proprio'),
(9,'Comercial'),
(9,'Outros'),
(10,'Claro'),
(10,'Oi'),
(10,'Tim'),
(10,'CTBC'),
(10,'Telefonica'),
(10,'Embratel'),
(10,'Net');

INSERT INTO TB_PROFISSAO(
NM_PROFISSAO,
CD_USUARIO_CRIACAO,
DT_USUARIO_CRIACAO,
CD_USUARIO_ATUALIZA,
DT_USUARIO_ATUALIZA
)
VALUES
('Almoxarife',1,now(),1,now()),
('Analista Contábil',1,now(),1,now()),
('Analista Faturamento',1,now(),1,now()),
('Aposentado',1,now(),1,now()),
('Assistente Social',1,now(),1,now()),
('Atendente de Enfermagem',1,now(),1,now()),
('Aux. Impressão',1,now(),1,now()),
('Aux. Serviços Gerais',1,now(),1,now()),
('Auxiliar de Almoxarifado',1,now(),1,now()),
('Auxiliar de Contabilidade',1,now(),1,now()),
('Auxiliar de COntas a Pagar',1,now(),1,now()),
('Auxiliar de Contas a Pagar',1,now(),1,now()),
('Auxiliar de Contas a Receber',1,now(),1,now()),
('Auxiliar de Cozinha',1,now(),1,now()),
('Auxiliar de Enfermagem',1,now(),1,now()),
('Auxiliar de Enfermagem',1,now(),1,now()),
('Auxiliar de Escritório',1,now(),1,now()),
('Auxiliar de Farmácia',1,now(),1,now()),
('Auxiliar de Internação',1,now(),1,now()),
('Auxiliar de Lavanderia',1,now(),1,now()),
('Auxiliar de Limpeza',1,now(),1,now()),
('Auxiliar de Manutenção',1,now(),1,now()),
('Auxiliar de Pessoal',1,now(),1,now()),
('Auxiliar de Rouparia',1,now(),1,now()),
('Auxiliar de Secretaria',1,now(),1,now()),
('Auxiliar de Tesouraria',1,now(),1,now()),
('Barbeiro',1,now(),1,now()),
('Cabeleireiro',1,now(),1,now()),
('Chefe Dep. de Financeiro',1,now(),1,now()),
('Chefe Dep. de Manutenção',1,now(),1,now()),
('Chefe Dep. de Psicologia',1,now(),1,now()),
('Chefe Dep. de Rec. Humanos',1,now(),1,now()),
('Chefe Dep. de Recepção/Internação',1,now(),1,now()),
('Chefe Dep. de Suprimentos',1,now(),1,now()),
('Chefe Dep. de T.O.',1,now(),1,now()),
('Chefe Dep. Financeiro',1,now(),1,now()),
('Chefe Dep. Serviço Social',1,now(),1,now()),
('Chefe Serv. Limpeza',1,now(),1,now()),
('Comprador',1,now(),1,now()),
('Contador(a)',1,now(),1,now()),
('Coordenador Enfermagem',1,now(),1,now()),
('Costureira',1,now(),1,now()),
('Cozinheira',1,now(),1,now()),
('Diretor Clínico',1,now(),1,now()),
('Do Lar',1,now(),1,now()),
('Eletricista de Manutenção',1,now(),1,now()),
('Enfermeira',1,now(),1,now()),
('Farmacêutica',1,now(),1,now()),
('Fisioterapeuta',1,now(),1,now()),
('Garçom',1,now(),1,now()),
('Gerente Administrativo',1,now(),1,now()),
('Gerente de T.I.',1,now(),1,now()),
('Gerente Depto. Assist. Espiritual',1,now(),1,now()),
('Gerente Depto.Prop.Doutrinaria',1,now(),1,now()),
('Gerente Hospitalar',1,now(),1,now()),
('Inativo',1,now(),1,now()),
('Jardineiro',1,now(),1,now()),
('Marceneiro',1,now(),1,now()),
('Mecanico de Manutenção',1,now(),1,now()),
('Médico Clínico Geral',1,now(),1,now()),
('Médico Geriatra',1,now(),1,now()),
('Médico Ginecologista',1,now(),1,now()),
('Médico Neurologista',1,now(),1,now()),
('Médico Plantonista',1,now(),1,now()),
('Médico Psiquiatra',1,now(),1,now()),
('Montor de T.O.',1,now(),1,now()),
('Motorista',1,now(),1,now()),
('Musicoterapêuta',1,now(),1,now()),
('Nutricionista',1,now(),1,now()),
('Outros',1,now(),1,now()),
('Pedreiro',1,now(),1,now()),
('Pintor',1,now(),1,now()),
('Presidente',1,now(),1,now()),
('Professor de Ed. Física',1,now(),1,now()),
('Programador de Computador',1,now(),1,now()),
('Psicologa',1,now(),1,now()),
('Recepcionista',1,now(),1,now()),
('Sapateiro',1,now(),1,now()),
('Serralheiro',1,now(),1,now()),
('Servente de Pedreiro',1,now(),1,now()),
('Superv. Rouparia/Lavanderia',1,now(),1,now()),
('Supervisor de Enfermagem',1,now(),1,now()),
('Supervisor Redação/Diagramação',1,now(),1,now()),
('Suporte Técnico TI',1,now(),1,now()),
('Técnico Contabil',1,now(),1,now()),
('Técnico de Enfermagem',1,now(),1,now()),
('Técnico Seg. Trabalho',1,now(),1,now()),
('Terapêuta Ocupacional',1,now(),1,now());

UPDATE TB_USUARIO SET
CD_USUARIO_CRIACAO = 1,
DT_USUARIO_CRIACAO = now(),
CD_USUARIO_ATUALIZA = 1, 
DT_USUARIO_ATUALIZA	= now();

UPDATE TB_PESSOA_FISICA SET
CD_USUARIO_CRIACAO = 1,
DT_USUARIO_CRIACAO = now(),
CD_USUARIO_ATUALIZA = 1, 
DT_USUARIO_ATUALIZA	= now();

UPDATE TB_CATEGORIA_VALOR SET
CD_USUARIO_CRIACAO = 1,
DT_USUARIO_CRIACAO = now(),
CD_USUARIO_ATUALIZA = 1, 
DT_USUARIO_ATUALIZA	= now();

UPDATE TB_CATEGORIA SET
CD_USUARIO_CRIACAO = 1,
DT_USUARIO_CRIACAO = now(),
CD_USUARIO_ATUALIZA = 1, 
DT_USUARIO_ATUALIZA	= now();

ALTER TABLE TB_USUARIO ALTER COLUMN CD_USUARIO_CRIACAO SET NOT NULL;

ALTER TABLE TB_USUARIO ALTER COLUMN DT_USUARIO_CRIACAO SET NOT NULL;

ALTER TABLE TB_USUARIO ALTER COLUMN CD_USUARIO_ATUALIZA SET NOT NULL;

ALTER TABLE TB_USUARIO ALTER COLUMN DT_USUARIO_ATUALIZA SET NOT NULL;

ALTER TABLE TB_PESSOA_FISICA ALTER COLUMN CD_USUARIO_CRIACAO SET NOT NULL;

ALTER TABLE TB_PESSOA_FISICA ALTER COLUMN DT_USUARIO_CRIACAO SET NOT NULL;

ALTER TABLE TB_PESSOA_FISICA ALTER COLUMN CD_USUARIO_ATUALIZA SET NOT NULL;

ALTER TABLE TB_PESSOA_FISICA ALTER COLUMN DT_USUARIO_ATUALIZA SET NOT NULL;

ALTER TABLE TB_CATEGORIA_VALOR ALTER COLUMN CD_USUARIO_CRIACAO SET NOT NULL;

ALTER TABLE TB_CATEGORIA_VALOR ALTER COLUMN DT_USUARIO_CRIACAO SET NOT NULL;

ALTER TABLE TB_CATEGORIA_VALOR ALTER COLUMN CD_USUARIO_ATUALIZA SET NOT NULL;

ALTER TABLE TB_CATEGORIA_VALOR ALTER COLUMN DT_USUARIO_ATUALIZA SET NOT NULL;

ALTER TABLE TB_CATEGORIA ALTER COLUMN CD_USUARIO_CRIACAO SET NOT NULL;

ALTER TABLE TB_CATEGORIA ALTER COLUMN DT_USUARIO_CRIACAO SET NOT NULL;

ALTER TABLE TB_CATEGORIA ALTER COLUMN CD_USUARIO_ATUALIZA SET NOT NULL;

ALTER TABLE TB_CATEGORIA ALTER COLUMN DT_USUARIO_ATUALIZA SET NOT NULL;

CREATE OR REPLACE FUNCTION fc_tg_apartamento_log() RETURNS TRIGGER 
AS $tb_apartamento_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_apartamento_log SELECT nextval('seq_tb_apartamento_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_apartamento_log SELECT nextval('seq_tb_apartamento_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_apartamento_log SELECT nextval('seq_tb_apartamento_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_apartamento_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_apartamento_log
AFTER INSERT OR UPDATE OR DELETE ON tb_apartamento
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_apartamento_log(); 
	
	

CREATE OR REPLACE FUNCTION fc_tg_categoria_log() RETURNS TRIGGER 
AS $tb_categoria_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_categoria_log SELECT nextval('seq_tb_categoria_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_categoria_log SELECT nextval('seq_tb_categoria_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_categoria_log SELECT nextval('seq_tb_categoria_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_categoria_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_categoria_log
AFTER INSERT OR UPDATE OR DELETE ON tb_categoria
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_categoria_log(); 
	
	
CREATE OR REPLACE FUNCTION fc_tg_categoria_valor_log() RETURNS TRIGGER 
AS $tb_categoria_valor_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_categoria_valor_log SELECT nextval('seq_tb_categoria_valor_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_categoria_valor_log SELECT nextval('seq_tb_categoria_valor_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_categoria_valor_log SELECT nextval('seq_tb_categoria_valor_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_categoria_valor_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_categoria_valor_log
AFTER INSERT OR UPDATE OR DELETE ON tb_categoria_valor
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_categoria_valor_log(); 
	

CREATE OR REPLACE FUNCTION fc_tg_condominio_log() RETURNS TRIGGER 
AS $tb_condominio_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_condominio_log SELECT nextval('seq_tb_condominio_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_condominio_log SELECT nextval('seq_tb_condominio_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_condominio_log SELECT nextval('seq_tb_condominio_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_condominio_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_condominio_log
AFTER INSERT OR UPDATE OR DELETE ON tb_condominio
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_condominio_log(); 
	

CREATE OR REPLACE FUNCTION fc_tg_itens_orcamento_log() RETURNS TRIGGER 
AS $tb_itens_orcamento_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_itens_orcamento_log SELECT nextval('seq_tb_itens_orcamento_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_itens_orcamento_log SELECT nextval('seq_tb_itens_orcamento_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_itens_orcamento_log SELECT nextval('seq_tb_itens_orcamento_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_itens_orcamento_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_itens_orcamento_log
AFTER INSERT OR UPDATE OR DELETE ON tb_itens_orcamento
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_itens_orcamento_log(); 
	
	
CREATE OR REPLACE FUNCTION fc_tg_morador_endereco_log() RETURNS TRIGGER 
AS $tb_morador_endereco_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_morador_endereco_log SELECT nextval('seq_tb_morador_endereco_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_morador_endereco_log SELECT nextval('seq_tb_morador_endereco_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_morador_endereco_log SELECT nextval('seq_tb_morador_endereco_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_morador_endereco_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_morador_endereco_log
AFTER INSERT OR UPDATE OR DELETE ON tb_morador_endereco
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_morador_endereco_log(); 
	

CREATE OR REPLACE FUNCTION fc_tg_ocorrencia_pf_envolvida_log() RETURNS TRIGGER 
AS $tb_ocorrencia_pf_envolvida_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_ocorrencia_pf_envolvida_log SELECT nextval('seq_tb_ocorrencia_pf_envolvida_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_ocorrencia_pf_envolvida_log SELECT nextval('seq_tb_ocorrencia_pf_envolvida_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_ocorrencia_pf_envolvida_log SELECT nextval('seq_tb_ocorrencia_pf_envolvida_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_ocorrencia_pf_envolvida_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_ocorrencia_pf_envolvida_log
AFTER INSERT OR UPDATE OR DELETE ON tb_ocorrencia_pf_envolvida
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_ocorrencia_pf_envolvida_log(); 
	
CREATE OR REPLACE FUNCTION fc_tg_ocorrencia_log() RETURNS TRIGGER 
AS $tb_ocorrencia_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_ocorrencia_log SELECT nextval('seq_tb_ocorrencia_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_ocorrencia_log SELECT nextval('seq_tb_ocorrencia_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_ocorrencia_log SELECT nextval('seq_tb_ocorrencia_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_ocorrencia_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_ocorrencia_log
AFTER INSERT OR UPDATE OR DELETE ON tb_ocorrencia
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_ocorrencia_log(); 
	

CREATE OR REPLACE FUNCTION fc_tg_orcamento_log() RETURNS TRIGGER 
AS $tb_orcamento_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_orcamento_log SELECT nextval('seq_tb_orcamento_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_orcamento_log SELECT nextval('seq_tb_orcamento_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_orcamento_log SELECT nextval('seq_tb_orcamento_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_orcamento_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_orcamento_log
AFTER INSERT OR UPDATE OR DELETE ON tb_orcamento
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_orcamento_log(); 
	
CREATE OR REPLACE FUNCTION fc_tg_ordem_servico_log() RETURNS TRIGGER 
AS $tb_ordem_servico_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_ordem_servico_log SELECT nextval('seq_tb_ordem_servico_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_ordem_servico_log SELECT nextval('seq_tb_ordem_servico_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_ordem_servico_log SELECT nextval('seq_tb_ordem_servico_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_ordem_servico_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_ordem_servico_log
AFTER INSERT OR UPDATE OR DELETE ON tb_ordem_servico
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_ordem_servico_log(); 
	
CREATE OR REPLACE FUNCTION fc_tg_pessoa_fisica_log() RETURNS TRIGGER 
AS $tb_pessoa_fisica_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_pessoa_fisica_log SELECT nextval('seq_tb_pessoa_fisica_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_pessoa_fisica_log SELECT nextval('seq_tb_pessoa_fisica_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_pessoa_fisica_log SELECT nextval('seq_tb_pessoa_fisica_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_pessoa_fisica_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_pessoa_fisica_log
AFTER INSERT OR UPDATE OR DELETE ON tb_pessoa_fisica
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_pessoa_fisica_log(); 


CREATE OR REPLACE FUNCTION fc_tg_pessoa_juridica_log() RETURNS TRIGGER 
AS $tb_pessoa_juridica_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_pessoa_juridica_log SELECT nextval('seq_tb_pessoa_juridica_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_pessoa_juridica_log SELECT nextval('seq_tb_pessoa_juridica_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_pessoa_juridica_log SELECT nextval('seq_tb_pessoa_juridica_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_pessoa_juridica_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_pessoa_juridica_log
AFTER INSERT OR UPDATE OR DELETE ON tb_pessoa_juridica
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_pessoa_juridica_log(); 

	
	
CREATE OR REPLACE FUNCTION fc_tg_pf_endereco_log() RETURNS TRIGGER 
AS $tb_pf_endereco_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_pf_endereco_log SELECT nextval('seq_tb_pf_endereco_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_pf_endereco_log SELECT nextval('seq_tb_pf_endereco_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_pf_endereco_log SELECT nextval('seq_tb_pf_endereco_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_pf_endereco_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_pf_endereco_log
AFTER INSERT OR UPDATE OR DELETE ON tb_pf_endereco
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_pf_endereco_log(); 
	
CREATE OR REPLACE FUNCTION fc_tg_pj_endereco_log() RETURNS TRIGGER 
AS $tb_pj_endereco_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_pj_endereco_log SELECT nextval('seq_tb_pj_endereco_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_pj_endereco_log SELECT nextval('seq_tb_pj_endereco_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_pj_endereco_log SELECT nextval('seq_tb_pj_endereco_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_pj_endereco_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_pj_endereco_log
AFTER INSERT OR UPDATE OR DELETE ON tb_pj_endereco
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_pj_endereco_log(); 

	
CREATE OR REPLACE FUNCTION fc_tg_profissao_log() RETURNS TRIGGER 
AS $tb_profissao_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_profissao_log SELECT nextval('seq_tb_profissao_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_profissao_log SELECT nextval('seq_tb_profissao_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_profissao_log SELECT nextval('seq_tb_profissao_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_profissao_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_profissao_log
AFTER INSERT OR UPDATE OR DELETE ON tb_profissao
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_profissao_log(); 
	
	
CREATE OR REPLACE FUNCTION fc_tg_relacionados_log() RETURNS TRIGGER 
AS $tb_relacionados_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_relacionados_log SELECT nextval('seq_tb_relacionados_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_relacionados_log SELECT nextval('seq_tb_relacionados_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_relacionados_log SELECT nextval('seq_tb_relacionados_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_relacionados_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_relacionados_log
AFTER INSERT OR UPDATE OR DELETE ON tb_relacionados
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_relacionados_log(); 
	
CREATE OR REPLACE FUNCTION fc_tg_servico_adicional_log() RETURNS TRIGGER 
AS $tb_servico_adicional_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_servico_adicional_log SELECT nextval('seq_tb_servico_adicional_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_servico_adicional_log SELECT nextval('seq_tb_servico_adicional_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_servico_adicional_log SELECT nextval('seq_tb_servico_adicional_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_servico_adicional_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_servico_adicional_log
AFTER INSERT OR UPDATE OR DELETE ON tb_servico_adicional
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_servico_adicional_log(); 
	

CREATE OR REPLACE FUNCTION fc_tg_setor_log() RETURNS TRIGGER 
AS $tb_setor_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_setor_log SELECT nextval('seq_tb_setor_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_setor_log SELECT nextval('seq_tb_setor_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_setor_log SELECT nextval('seq_tb_setor_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_setor_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_setor_log
AFTER INSERT OR UPDATE OR DELETE ON tb_setor
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_setor_log(); 
	

CREATE OR REPLACE FUNCTION fc_tg_usuario_log() RETURNS TRIGGER 
AS $tb_usuario_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_usuario_log SELECT nextval('seq_tb_usuario_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_usuario_log SELECT nextval('seq_tb_usuario_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_usuario_log SELECT nextval('seq_tb_usuario_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_usuario_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_usuario_log
AFTER INSERT OR UPDATE OR DELETE ON tb_usuario
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_usuario_log(); 

CREATE OR REPLACE FUNCTION fc_tg_vaga_garagem_log() RETURNS TRIGGER 
AS $tb_vaga_garagem_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_vaga_garagem_log SELECT nextval('seq_tb_vaga_garagem_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_vaga_garagem_log SELECT nextval('seq_tb_vaga_garagem_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_vaga_garagem_log SELECT nextval('seq_tb_vaga_garagem_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_vaga_garagem_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_vaga_garagem_log
AFTER INSERT OR UPDATE OR DELETE ON tb_vaga_garagem
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_vaga_garagem_log(); 
	
CREATE OR REPLACE FUNCTION fc_tg_pf_telefone_log() RETURNS TRIGGER 
AS $tb_pf_telefone_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_pf_telefone_log SELECT nextval('seq_tb_pf_telefone_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_pf_telefone_log SELECT nextval('seq_tb_pf_telefone_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_pf_telefone_log SELECT nextval('seq_tb_pf_telefone_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_pf_telefone_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_pf_telefone_log
AFTER INSERT OR UPDATE OR DELETE ON tb_pf_telefone
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_pf_telefone_log(); 



CREATE OR REPLACE FUNCTION fc_tg_pj_telefone_log() RETURNS TRIGGER 
AS $tb_pj_telefone_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_pj_telefone_log SELECT nextval('seq_tb_pj_telefone_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_pj_telefone_log SELECT nextval('seq_tb_pj_telefone_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_pj_telefone_log SELECT nextval('seq_tb_pj_telefone_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_pj_telefone_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_pj_telefone_log
AFTER INSERT OR UPDATE OR DELETE ON tb_pj_telefone
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_pj_telefone_log(); 
	
CREATE OR REPLACE FUNCTION fc_tg_instituicao_ensino_log() RETURNS TRIGGER 
AS $tb_instituicao_ensino_log$
	BEGIN 
		
		IF (TG_OP = 'DELETE') THEN
			INSERT INTO tb_instituicao_ensino_log SELECT nextval('seq_tb_instituicao_ensino_log'),user::INTEGER, now(), 'D', old.*;						  
		
		ELSIF (TG_OP = 'UPDATE') THEN
			INSERT INTO tb_instituicao_ensino_log SELECT nextval('seq_tb_instituicao_ensino_log'),user::INTEGER, now(), 'U', new.*;

		ELSIF (TG_OP = 'INSERT') THEN
			INSERT INTO tb_instituicao_ensino_log SELECT nextval('seq_tb_instituicao_ensino_log'),user::INTEGER, now(), 'I', new.*;
			RETURN NEW;
		END IF;
		
		RETURN NULL;
	
	END;
$tb_instituicao_ensino_log$ LANGUAGE 'plpgsql';	

CREATE TRIGGER tg_tb_instituicao_ensino_log
AFTER INSERT OR UPDATE OR DELETE ON tb_instituicao_ensino
	FOR EACH ROW EXECUTE PROCEDURE fc_tg_instituicao_ensino_log(); 


---Insert para teste---

INSERT INTO tb_pessoa_fisica(
nm_pessoa_fisica,
cpf,
rg,
cd_catg_org_rg,
cd_vl_catg_org_rg,
dt_nascimento,
ie_sexo,
im_perfil,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
('Joana',
 '000.000.000-02',
 '00000002',
  1, 
  1,
  '01/01/2000',
  'F',
  lo_import('C:/joana.jpg'),
  1,
  now(),
  1,
  now());


  INSERT INTO tb_pf_endereco(
cd_catg_end
cd_vl_catg_end,
cd_pessoa_fisica,
cep,
rua,
numero,
bairro,
cidade,
cd_catg_estado,
cd_catg_estado,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(5,1,1,
'00000-00',
'Presidente Vargas',
14,
'Vila Dionisio',
'Franca',
2,25,1,now(),1,now());


INSERT INTO tb_pessoa_juridica(
cnpj,
nm_fantasia,
desc_razao,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
('08.950.468/0001-59',
'Oracle',
'Bussines Oracle',
1,now(),1,now());

INSERT INTO tb_pj_endereco(
cd_catg_end
cd_vl_catg_end,
cd_pessoa_juridica,
cep,
rua,
numero,
bairro,
cidade,
cd_catg_estado,
cd_catg_estado,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(5,2,1,
'00000-00',
'Presidente Vargas',
10,
'Vila Dionisio',
'Franca',
2,25,1,now(),1,now());


INSERT INTO tb_condominio(
nm_condominio,
cep,
rua,
numero,
bairro,
cidade,
cd_catg_estado,
cd_catg_vl_estado,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
('Bela Vista','00000-00','Joaquim Barbosa',
'Santo Espedito','São Paulo',2,25,1,now(),
1,now());


INSERT INTO tb_setor(
cd_condominio,
nm_setor,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(1,'Torre 1',1,now(),1,now());

INSERT INTO tb_apartamento(
cd_setor,
desc_apartamento,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(1,'A1',1,now(),1,now());

INSERT INTO(
cd_pessoa_fisica,
cd_apartamento,
dt_entrada,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(2,1,now(),1,now(),1,now());


INSERT INTO tb_relacionados(
cd_pessoa_fisica_1,
cd_pessoa_fisica_2,
cd_catg_relac_pf_1,
cd_vl_catg_relac_pf_1,
cd_catg_relac_pf_1,
cd_vl_catg_relac_pf_1,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(1,2,
4,1,
4,4,
1,now(),1,now());

INSERT INTO tb_vaga_garagem(
ds_vaga,
cd_setor,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(1,'T1',1,now(),1,now());

INSERT INTO tb_pf_telefone(
cd_pessoa_fisica,
fone,
cd_catg_fone_pf,
cd_catg_vl_fone_pf,
cd_catg_operadora,
cd_catg_vl_operadora,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(2,'(16)99222-1212',
5,3,10,1,1,now(),1,now());

INSERT INTO tb_pj_telefone(
cd_pessoa_juridica,
fone,
cd_catg_fone_pj,
cd_catg_vl_fone_pj,
cd_catg_operadora,
cd_catg_vl_operadora,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(2,'(16) 2177-5000',
6,1,10,6,4,1,now(),1,now());

INSERT INTO tb_instituicao_ensino(
ds_instituicao,
cd_catg_instituicao,
cd_catg_vl_instituicao,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
('Laura de Mello',8,2,
1,now(),1,now());


INSERT INTO tb_ocorrencia
(cd_pf_informante,
desc_assunto,
desc_ocorrencia,
dt_ocorrencia,
ie_situacao,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(1,'vidro quebrado',
'O administrador quebrou o vidro',
now(),
1,
1,now(),1,now());

INSERT INTO tb_orcamento(
dt_orcamento,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(now(),1,now(),1,now());


INSERT INTO tb_ordem_servico(
cd_pf_executor,
cd_pf_solicitante,
desc_assunto,
desc_ordem_servico,
dt_inicio,
cd_catg_estagio,
cd_usuario_criacao,
dt_usuario_criacao,
cd_usuario_atualiza,
dt_usuario_atualiza)
VALUES
(1,2,'Internet','solicito a instalação de internet',
now(),3,1,1,now(),1,now());

